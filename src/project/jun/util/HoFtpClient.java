package project.jun.util;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.SocketException;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;import org.apache.commons.net.ftp.FTP;import org.apache.commons.net.ftp.FTPClient;import org.apache.commons.net.ftp.FTPClientConfig;import org.apache.commons.net.ftp.FTPFile;import org.apache.commons.net.ftp.FTPReply;/** * FTP Client *  * @version 1.2 *  */public class HoFtpClient{	public static final int BINARY_FILE_TYPE = FTP.BINARY_FILE_TYPE;	public static final int ASCII_FILE_TYPE  = FTP.ASCII_FILE_TYPE;		private FTPClient ftp = null;	//서버 시스템 정보	private Map systMap = new HashMap();	//ftp 서버 연결 정보	private Map serverInfoMap = null;		/**	 * 	 * 	 * @param systemKey	 * @param language	 */	public HoFtpClient()	{		ftp = new FTPClient();				systMap.put("MVS",   FTPClientConfig.SYST_MVS);		systMap.put("NT",    FTPClientConfig.SYST_NT);		systMap.put("OS2",   FTPClientConfig.SYST_OS2);		systMap.put("OS400", FTPClientConfig.SYST_OS400);		systMap.put("UNIX",  FTPClientConfig.SYST_UNIX);		systMap.put("VMS",   FTPClientConfig.SYST_VMS);			}		/**	 * ftp접속 및 로그인 한다.	 * applicationContext.xml에서 설정되어있을 경우 사용 가능.	 * @param serverName	 * @return	 * @throws IOException	 */	public boolean connect(String serverName) throws IOException {		boolean connected = false;		String host = (String) this.serverInfoMap.get(serverName.toLowerCase() + "_host");		int    port = Integer.parseInt((String) this.serverInfoMap.get(serverName.toLowerCase() + "_port"));				String id = (String) this.serverInfoMap.get(serverName.toLowerCase() + "_id");		String pwd = (String) this.serverInfoMap.get(serverName.toLowerCase() + "_pwd");		String syst = (String) this.systMap.get((String) this.serverInfoMap.get(serverName.toLowerCase() + "_syst"));		connected = connect( host,  port);		if(connected) {			connected = ftp.login( id, pwd);			if(connected) {				configure(new FTPClientConfig(syst));			}			return connected;		} else {			return connected;		}	}		/**	 * 연결	 * @param hostName		FTP서버 	 * @param port			FTP포트	 * @return				true: 연결성공, false:연결실패(refused connection)	 */	public boolean connect( String hostName, int port )	{		try		{			ftp.connect( hostName, port );			int reply = ftp.getReplyCode();			if( !FTPReply.isPositiveCompletion( reply ) )			{				disconnect();				return false;			}						ftp.setFileType( FTP.BINARY_FILE_TYPE );			return true;		}		catch( Exception e )		{			return false;		}	}	/**	 * FTP서버에 로그인	 * @param userName   사용자계정	 * @param password   비밀번호	 * @return			  true: 인증성공, false:인증실패	 * @throws IOException 	 */	public boolean login( String userName, String password ) throws IOException	{		return ftp.login( userName, password);	}	/**	 * 연결되어 있는지 확인	 * @return	 */	public boolean isConnected()	{		return ftp.isConnected();	}	/**	 * 서버접속을 설정한다.	 * ex. 	 * 		FTPClientConfig config = new FTPClientConfig(FTPClientConfig.SYST_MVS);	 * 		config.	 * @param config	 */	public void configure( FTPClientConfig config )	{		ftp.configure( config );	}		public int getReplyCode()	{		return ftp.getReplyCode();	}		public String getReplyString()	{		return ftp.getReplyString();	}	/**	 * 연결을 끊는다.	 *	 */	public void disconnect()	{		try 		{			if( ftp.isConnected() )				ftp.disconnect();		}		catch( Exception e )		{			// do nothing		}	}			/**	 * 전송할 파일타입	 * 	 * @param fileType  WizFtpClient.BINARY_FILE_TYPE or WizFtpClient.ASCII_FILE_TYPE	 * @return	 * @throws IOException	 */	public boolean setFileType( int fileType ) throws IOException	{		return ftp.setFileType(fileType);	}		/**	 * 파일을 업로드한다.	 * 	 * @param remoteFileName	서버에 저장될 파일명	 * @param localFileName	서버로 업로드할 파일명	 * @return					true: 성공, false:실패	 * @throws IOException 	 * @throws UnsupportedEncodingException 	 */	public boolean uploadFile( String remoteFileName, String localFileName ) throws UnsupportedEncodingException, IOException	{		FileInputStream stream = new FileInputStream( localFileName );				try		{			return ftp.storeFile( new String(remoteFileName.getBytes(), "ISO8859-1"), stream);		}		finally		{			stream.close();		}	}		/**	 * 서버의 파일을 다운로드한다.	 * 	 * @param remoteFileName	다운로드할 서버의 파일명	 * @param localFileName	저장할 파일명	 * @return					true: 성공, false:실패	 * @throws IOException 	 * @throws UnsupportedEncodingException 	 * @throws IOException	 */	public boolean downloadFile( String remoteFileName, String localFileName ) throws UnsupportedEncodingException, IOException	{		FileOutputStream stream = new FileOutputStream( localFileName );					try		{			return ftp.retrieveFile(new String(remoteFileName.getBytes(), "ISO8859-1"), stream);		}		finally		{			stream.close();		}	}		/**	 * FTP서버의 파일을 삭제한다.	 * 	 * @param remoteFileName	삭제할 파일명	 * @return					true: 성공(파일이 없을 경우도 성공), false: 실패	 * @throws IOException 	 * @throws UnsupportedEncodingException 	 * @throws IOException	 */	public boolean deleteFile( String remoteFileName ) throws UnsupportedEncodingException, IOException	{		boolean bAns = ftp.deleteFile( new String(remoteFileName.getBytes(), "ISO8859-1") );		if( bAns ) {			return true;		} else {			return ( !bAns && ftp.getReplyCode() == 550 );		}	}		/**	 * FTP서버의 파일명을 변경한다.	 * 	 * @param fromName			변경할 원본파일명	 * @param toName			변경후 파일명	 * @return					true: 성공, false: 실패	 * @throws IOException 	 * @throws UnsupportedEncodingException 	 * @throws IOException	 */	public boolean rename( String fromName, String toName ) throws UnsupportedEncodingException, IOException	{		return ftp.rename( new String(fromName.getBytes(), "ISO8859-1"), new String(toName.getBytes(), "ISO8859-1") );	}			/**	 * 서버에 디렉토리를 만든다.	 * 	 * @param pathName 디렉토리명	 * @return	 * @throws IOException	 */	public boolean makeDirectory( String pathName ) throws IOException	{		return ftp.makeDirectory( pathName );	}		/**	 * 서버 디렉토리를 삭제한다.	 * 	 * @param pathName 디렉토리명	 * @return	 * @throws IOException	 */	public boolean deleteDirectory( String pathName ) throws IOException	{		return ftp.removeDirectory( pathName );	}		public FTPFile[] listFiles( String pathName ) throws IOException	{	    return ftp.listFiles(pathName);	}		public Map getServerInfoMap() {		return serverInfoMap;	}	public void setServerInfoMap(Map serverInfoMap) {		this.serverInfoMap = serverInfoMap;		Set keySet = this.serverInfoMap.keySet();		Iterator it = keySet.iterator();				String key = null;				String [] conectInfo = null;				while( it.hasNext() ) {			key = (String) it.next();						conectInfo = ((String)this.serverInfoMap.get(key)).split(",");						this.serverInfoMap.put(key.toLowerCase() + "_host", conectInfo[0].replaceAll(" ", ""));			this.serverInfoMap.put(key.toLowerCase() + "_port", conectInfo[1].replaceAll(" ", ""));			this.serverInfoMap.put(key.toLowerCase() + "_id", conectInfo[2].replaceAll(" ", ""));			this.serverInfoMap.put(key.toLowerCase() + "_pwd", conectInfo[3].replaceAll(" ", ""));			this.serverInfoMap.put(key.toLowerCase() + "_syst", conectInfo[4].replaceAll(" ", ""));					}	}	public static void main( String[] args ) throws SocketException, IOException	{		HoFtpClient ftp = new HoFtpClient();		try 		{			// 연결			ftp.connect("localhost", 21);			//// System.out.println("연결성공");					// 로그인			if( !ftp.login( "user", "1111") )			{				// System.out.println("인증실패");				return;			}			// System.out.println("인증성공");						// 파일전송타입을 binary로 설정			ftp.setFileType( HoFtpClient.BINARY_FILE_TYPE );						// 파일전송타입을 ascii로 설정			// ftp.setFileType( WizFtpClient.ASCII_FILE_TYPE );						// 파일업로드			if( !ftp.uploadFile("/엑셀업로드.xls", "d:/엑셀업로드.xls") )			{				// System.out.println("업로드 실패");				return;			}			// System.out.println("업로드 성공");						// 다운로드			if( !ftp.downloadFile("/엑셀업로드.xls", "d:/excel-upload.xls") )			{				// System.out.println("다운로드 실패");				return;			}			// System.out.println("다운로드 성공");						// 디렉토리 생성			if( !ftp.makeDirectory("/temp") )			{				// System.out.println("디렉토리 생성 실패");				return;			}			// System.out.println("디렉토리 생성 성공");						// 파일명 변경			if( !ftp.rename("/엑셀업로드.xls", "/temp/엑셀업로드.xls"))			{				// System.out.println("rename 실패");				return;			}			// System.out.println("rename 성공");						// 파일삭제			if( !ftp.deleteFile("/temp/엑셀업로드.xls"))			{				// System.out.println("파일삭제 실패");				return;			}			// System.out.println("파일삭제 성공");						// 디렉토리 삭제			if( !ftp.deleteDirectory( "/temp"))			{				// System.out.println("디렉토리 삭제 실패");				return;			}			// System.out.println("디렉토리 삭제 성공");						}		catch( Exception e )		{			// System.out.println("오류:" + ftp.getReplyCode() + ":" + ftp.getReplyString() );		}		finally		{			// 연결끊기			ftp.disconnect();		}	}}