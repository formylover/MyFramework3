package project.jun.util;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.Locale;import java.util.SimpleTimeZone;import java.util.TimeZone;public class HoDate {	private Locale locale = Locale.getDefault();	private String format = "yyyyMMdd";	private Calendar calendar = null;		private HoDate() {    	String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);    	SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);		// set up rules for daylight savings time		pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);		pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);		Date trialTime = new Date();				this.calendar = new GregorianCalendar(pdt);		this.calendar.setTime(trialTime);   	}		public HoDate(String format) {		this();		this.format = format;	}		public Locale getLocale() {		return this.locale;	}		public void setLocale(Locale locale) {		this.locale = locale;	}	public void setFormate(String format) {		this.format = format;	}	/**	 * date형태일때(yyyy/MM/dd or MM/dd/yyyy)의 형태일때 yyyyMMdd로 변환한다.	 * @param value	 * @param format	 * @return	 */	public String getPlanValue(String value) {				return getPlanValue(value, this.format);			}	/**	 * date형태일때(yyyy/MM/dd or MM/dd/yyyy)의 형태일때 yyyyMMdd로 변환한다.	 * @param value	 * @param format	 * @return	 */	public String getPlanValue(String value, String format) {				return getPlanValue(value, format, this.locale);			}		/**	 * date형태일때(yyyy/MM/dd or MM/dd/yyyy)의 형태일때 yyyyMMdd로 변환한다.	 * @param value	 * @param format	 * @return	 */	public String getPlanValue(String value, String format, Locale locale) {		String plainValue = "";		SimpleDateFormat sdf = new SimpleDateFormat(format, locale)  ;						try {			plainValue =  (new SimpleDateFormat("yyyyMMdd")).format(sdf.parse(value));		} catch (ParseException e) {					}		return plainValue;			}		/**	 * 입력된 값과 길이를  분석하여 yyyyMMdd형태 or yyyMMddHHmm or yyyMMddHHmmss형태로 return한다.	 * @param value	 * @param locale	 * @return	 */	public String getPlanValueLocale(String value) {		return getPlanValueLocale(value, getLocale());	}		/**	 * 입력된 값과 길이를  분석하여 yyyyMMdd형태 or yyyMMddHHmm or yyyMMddHHmmss형태로 return한다.	 * @param value	 * @param locale	 * @return	 */	public String getPlanValueLocale(String value, Locale locale) {		String plainValue = "";				String dt = "";		String tm = "";		String delemeter = "-";		String format = "";		String formatT= "";		String formatDt = "";		String formatTm = "";				if( value.indexOf(" ")!=-1) {			String [] datestamp = value.split(" ");						dt = datestamp[0];			tm = datestamp[1];			formatDt = "yyyyMMdd";		} else if(value.indexOf(":")!=-1) {			tm = value;		} else {			dt = value;			formatDt = "yyyyMMdd";		}				String [] dt_es = new String[3];		if( dt.indexOf("/")!=-1 ) {			delemeter = "/";			dt_es = dt.split("/");		} else if ( dt.indexOf(".")!=-1 ) {			delemeter = ".";			dt_es = dt.split(".");		} else if ( dt.indexOf("-")!=-1 ) {			delemeter = "-";			dt_es = dt.split("-");		} 						if( dt_es[0].length() == 4 ) {			format = "yyyy";			format += delemeter;			for( int i=0; i< dt_es[1].length() ; i++ ) {				format += "M"; 							}			format += delemeter;			for( int i=0; i< dt_es[2].length() ; i++ ) {				format += "d"; 			}		} else if( dt_es[2].length() == 4 ){			for( int i=0; i< dt_es[0].length() ; i++ ) {				format += "M"; 			}			format += delemeter;			for( int i=0; i< dt_es[1].length() ; i++ ) {				format += "d"; 			}			format += delemeter;			format += "yyyy";		}				if( tm.length() > 0 ) {			if( tm.replaceAll(":", "").length() == 4 ) {				formatT = "HH:mm";				formatTm = "HHmm";			} else if( tm.replaceAll(":", "").length() == 6 ) {				formatT = "HH:mm:ss";				formatTm = "HHmmss";			}		}				SimpleDateFormat sdf = new SimpleDateFormat(format+formatT, locale)  ;						try {			plainValue =  (new SimpleDateFormat(formatDt+formatTm)).format(sdf.parse(value));		} catch (ParseException e) {					}		return plainValue;	}	/**	 * yyyyMMdd를 date형태일때(yyyy/MM/dd or MM/dd/yyyy)의 형태로 변환	 * @param value	 * @param format	 * @return	 */	public String getValueFormated(String value) {		return getValueFormated(value, format);	}	/**	 * yyyyMMdd를 date형태일때(yyyy/MM/dd or MM/dd/yyyy)의 형태로 변환	 * @param value	 * @param format	 * @return	 */	public String getValueFormated(String value, String format) {		String formatedValue = "";		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd")  ;						try {			formatedValue =  (new SimpleDateFormat(format)).format(sdf.parse(value));		} catch (ParseException e) {			e.printStackTrace();		}		return formatedValue;	}	/**	 * 1개월전 오늘의 년월일을 구한다. 	 * @param null 	 * @return String 1개월전 년월일	 */    public String getPrevMonth()   {        return getMonthAfter(-1);    }	/**	 * 1개월후 오늘의 년월일을 구한다. 	 * @param null 	 * @return String 1개월후 년월일	 */    public String getNextMonth()   {        return getMonthAfter(1);    }    	/**	 * 몇개월 전후 오늘의 년월일을 구한다. 	 * @param int     금월을 기준으로 구하고자하는 월의 기간. 	 * @return String 금월+기간의  년월일	 */    public String getMonthAfter(int i)    {    	Calendar absdate = Calendar.getInstance();        absdate.add(Calendar.MONTH, i);        return getValueFormated((new SimpleDateFormat("yyyyMMdd")).format(absdate.getTime()));    }	/**	 * 오늘의 몇일후를 구한다. 	 * @param int     	 * @return String 금월의 마지막 일자.[예)20030731]	 */    public String getDayAfter(int i)    {    	Calendar today = Calendar.getInstance();    	today.add ( Calendar.DATE, i );    	return getValueFormated((new SimpleDateFormat("yyyyMMdd")).format(today.getTime()));    }    	/**	 * 금년의 첫일을 구한다. 	 * @param null     	 */    public String getFirstDayOfYear()   {    	GregorianCalendar calendar = new GregorianCalendar();        StringBuffer stringbuffer = new StringBuffer();        int i = calendar.get(Calendar.YEAR);        int j = 1;        int k = 1;        stringbuffer.append((new DecimalFormat("0000")).format(i));        stringbuffer.append((new DecimalFormat("00")).format(j));        stringbuffer.append((new DecimalFormat("00")).format(k));        return getValueFormated(stringbuffer.toString());    } 	/**	 * 금년의 마지막 일을 구한다. 	 * @param null     	 * @return String 금월의 마지막 일자.[예)20030731]	 */    public String getLastDayOfYear()   {    	GregorianCalendar calendar = new GregorianCalendar();        StringBuffer stringbuffer = new StringBuffer();        int i = calendar.get(Calendar.YEAR);        int j = 12;        int k = 31;        stringbuffer.append((new DecimalFormat("0000")).format(i));        stringbuffer.append((new DecimalFormat("00")).format(j));        stringbuffer.append((new DecimalFormat("00")).format(k));        return getValueFormated(stringbuffer.toString());    }    	/**	 * 금월의 첫일을 구한다. 	 * @param null     	 */    public String getFirstDayOfMonth()   {    	GregorianCalendar calendar = new GregorianCalendar();        StringBuffer stringbuffer = new StringBuffer();        int i = calendar.get(Calendar.YEAR);        int j = calendar.get(Calendar.MONTH) + 1;        int k = 1;        stringbuffer.append((new DecimalFormat("0000")).format(i));        stringbuffer.append((new DecimalFormat("00")).format(j));        stringbuffer.append((new DecimalFormat("00")).format(k));        return getValueFormated(stringbuffer.toString());    } 	/**	 * 금월의 마지막 일을 구한다. 	 * @param null     	 * @return String 금월의 마지막 일자.[예)20030731]	 */    public String getLastDayOfMonth()   {    	GregorianCalendar calendar = new GregorianCalendar();        StringBuffer stringbuffer = new StringBuffer();        int i = calendar.get(Calendar.YEAR);        int j = calendar.get(Calendar.MONTH) + 1;        int k = calendar.getActualMaximum(Calendar.DATE);        stringbuffer.append((new DecimalFormat("0000")).format(i));        stringbuffer.append((new DecimalFormat("00")).format(j));        stringbuffer.append((new DecimalFormat("00")).format(k));        return getValueFormated(stringbuffer.toString());    }    /**     * 오늘포함된 주의 시작일을 구한다.     * @return     */    public String getFirstDayOfWeek() {    	Calendar today = Calendar.getInstance();    	today.add ( Calendar.DATE, 2 - this.calendar.get(Calendar.DAY_OF_WEEK) );    	return getValueFormated((new SimpleDateFormat("yyyyMMdd")).format(today.getTime()));    	    }        /**     * 오늘포함된 주의 시작일을 구한다.     * @return     */    public String getLastDayOfWeek() {    	Calendar today = Calendar.getInstance();    	today.add ( Calendar.DATE, 8 - this.calendar.get(Calendar.DAY_OF_WEEK) );    	return getValueFormated((new SimpleDateFormat("yyyyMMdd")).format(today.getTime()));    	    }       /**     * 올해를 구한다.     * @return     */    public int getYear() {    	return calendar.get(Calendar.YEAR);    }    /**     * 올해를 구한다.     * @return     */    public String getYearString() {    	return String.valueOf(calendar.get(Calendar.YEAR));    }    /**     * 이번달을 구한다.     * @return     */    public int getMonth() {    	return calendar.get(Calendar.MONTH)+1;    }        /**     * 이번달을 구한다.     * @return     */    public String getMonthString() {    	if( calendar.get(Calendar.MONTH)+1 < 10) {    		return "0"+String.valueOf(calendar.get(Calendar.MONTH)+1);    	} else {    		return String.valueOf(calendar.get(Calendar.MONTH)+1);    	}    }        /**     * 오늘의 날짜를  구한다.     * @return     */    public int getDate() {    	return calendar.get(Calendar.DATE);    }    /**     * 오늘의 날짜를  구한다.     * @return     */    public String getDateString() {    	if( calendar.get(Calendar.DATE) < 10) {    		return "0"+String.valueOf(calendar.get(Calendar.DATE));    	} else {    		return String.valueOf(calendar.get(Calendar.DATE));    	}    }    /**     * 오늘을 구한다.     * @return     */    public String getToday() {    	return getValueFormated(getYearString() + getMonthString() + getDateString());    }    /**     * 초를 시:분:초 형태로 return한다.     * @param second     * @return     */    public String getSecondToString(String second) {    	if( second.equals("") ||  second.equals("-") ) {    		return "-";    	}    	return getSecondToString(Integer.parseInt(second));    }        /**     * 초를 시:분:초 형태로 return한다.     * @param second     * @return     */    public String getSecondToString(int second) {    	String str = "";    	    	int hour = (second / (60*60));    	int minute = ((second-(hour*60*60)) / 60);    	int sec     = second - (hour*60*60) - (minute*60);    	if( hour < 10 ) {    		str += "0";    	}    	str += hour;    	str += ":";    	if( minute < 10 ) {    		str += "0";    	}    	str += minute;    	str += ":";    	if( sec < 10 ) {    		str += "0";    	}    	str += sec;    	    	return str;    }        public static void main(String [] args) {    	HoDate hd = new HoDate("yyyy/MM/dd");    	    	// hd.getValueFormated("20110701") :2011/07/01    	System.out.println( "hd.getValueFormated(\"20110701\") :" +hd.getValueFormated("20110701") );    	    	System.out.println( "getPlanValueLocale(\"07/11/2011 23:00\") :" +hd.getPlanValueLocale("07/11/2011 23:00") );    	System.out.println( "getPlanValueLocale(\"07/11/2011 23:01:10\") :" +hd.getPlanValueLocale("07/11/2011 23:01:10") );    	System.out.println( "getPlanValueLocale(\"2011/07/11 23:01:10\") :" +hd.getPlanValueLocale("2011/07/11 23:01:10") );    	System.out.println( "getPlanValueLocale(\"2011/07/11\") :" +hd.getPlanValueLocale("2011/07/11") );    	    	System.out.println( "getPlanValueLocale(\"07-11-2011 23:00\") :" +hd.getPlanValueLocale("07-11-2011 23:00") );    	System.out.println( "getPlanValueLocale(\"07-11-2011 23:01:10\") :" +hd.getPlanValueLocale("07-11-2011 23:01:10") );    	System.out.println( "getPlanValueLocale(\"2011-07-11 23:01:10\") :" +hd.getPlanValueLocale("2011-07-11 23:01:10") );    	System.out.println( "getPlanValueLocale(\"2011-07-11\") :" +hd.getPlanValueLocale("2011-07-11") );    	System.out.println( "getPlanValueLocale(\"2011-7-1 23:01:10\") :" +hd.getPlanValueLocale("2011-7-1 23:01:10") );    	System.out.println( "getPlanValueLocale(\"2011-7-1\") :" +hd.getPlanValueLocale("2011-7-1") );    	    	System.out.println( "getFirstDayInWeek() :" +hd.getFirstDayOfWeek() );    	System.out.println( "getFirstLastInWeek() :" +hd.getLastDayOfWeek() );    	System.out.println( "getToday() :" +hd.getToday() );    	    	    	 String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);    	 SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);    	 // set up rules for daylight savings time    	 pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);    	 pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);    	 Calendar calendar = new GregorianCalendar(pdt);    	 Date trialTime = new Date();    	 calendar.setTime(trialTime);    	 // print out a bunch of interesting things    	 System.out.println("ERA: " + calendar.get(Calendar.ERA));    	 System.out.println("YEAR: " + calendar.get(Calendar.YEAR));    	 System.out.println("MONTH: " + calendar.get(Calendar.MONTH));    	 System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR));    	 System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH));    	 System.out.println("DATE: " + calendar.get(Calendar.DATE));    	 System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH));    	 System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR));    	 System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK));    	 System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));    	 System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM));    	 System.out.println("HOUR: " + calendar.get(Calendar.HOUR));    	 System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY));    	 System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE));    	 System.out.println("SECOND: " + calendar.get(Calendar.SECOND));    	 System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND));    	 System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));    	 System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));    	 System.out.println("Current Time, with hour reset to 3");    	 calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override    	 calendar.set(Calendar.HOUR, 3);    	 System.out.println("ERA: " + calendar.get(Calendar.ERA));    	 System.out.println("YEAR: " + calendar.get(Calendar.YEAR));    	 System.out.println("MONTH: " + calendar.get(Calendar.MONTH));    	 System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR));    	 System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH));    	 System.out.println("DATE: " + calendar.get(Calendar.DATE));    	 System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH));    	 System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR));    	     	 System.out.println("DAY_OF_WEEK: " + Calendar.DAY_OF_WEEK);    	     	 System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK));    	 System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));    	 System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM));    	 System.out.println("HOUR: " + calendar.get(Calendar.HOUR));    	 System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY));    	 System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE));    	 System.out.println("SECOND: " + calendar.get(Calendar.SECOND));    	 System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND));    	 System.out.println("ZONE_OFFSET: "+ (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours    	 System.out.println("DST_OFFSET: "  + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours    }    }