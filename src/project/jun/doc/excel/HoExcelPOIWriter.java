package project.jun.doc.excel;import java.io.FileNotFoundException;import java.io.IOException;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFFont;import org.apache.poi.hssf.usermodel.HSSFRichTextString;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.hssf.util.Region;public class HoExcelPOIWriter implements HoExcelWriter {	HSSFWorkbook workbook = null;    HSSFSheet    sheet    = null;        public void setWorkbook(Object wb) throws Exception {    	if( wb instanceof HSSFWorkbook) {    		this.workbook = (HSSFWorkbook) wb;    	} else {    		throw new ClassCastException("Workbook must be instance of HSSFWorkbook!!");    	}    }        public void createExel() throws FileNotFoundException, IOException {    	workbook = new HSSFWorkbook();    }    public Object getWorkBook() {    	return this.workbook;    }    /**     * add for POI     * @return     */    public HSSFWorkbook getHSSFWorkBook() {    	return this.workbook;    }        public void createSheet(String sheetName) throws FileNotFoundException, IOException {    	sheet = workbook.createSheet(sheetName);    }    public void createSheet() throws FileNotFoundException, IOException {    	sheet = workbook.createSheet();    }    public Object createRow(int rowIdx) throws FileNotFoundException, IOException {    	if( workbook == null ) {    		workbook = new HSSFWorkbook();    	}    	    	if( sheet == null ) {    		createSheet();    	}    	    	return sheet.getRow(rowIdx)!=null ? sheet.getRow(rowIdx) : sheet.createRow(rowIdx);    }        /**     * add for POI     * @return     */    public HSSFRow createHSSFRow(int rowIdx) throws FileNotFoundException, IOException {    	if( workbook == null ) {    		workbook = new HSSFWorkbook();    	}    	    	if( sheet == null ) {    		createSheet();    	}    	    	return sheet.getRow(rowIdx)!=null ? sheet.getRow(rowIdx) : sheet.createRow(rowIdx);    }        public Object createCell(int rowIdx, short cellIdx) throws FileNotFoundException, IOException {    	return createHSSFRow(rowIdx).getCell(cellIdx)==null ? createHSSFRow(rowIdx).createCell(cellIdx) : sheet.getRow(rowIdx).createCell(cellIdx);     }        /**     * add for POI     * @return     */    public HSSFCell createHSSFCell(int rowIdx, short cellIdx) throws FileNotFoundException, IOException {    	return createHSSFRow(rowIdx).getCell(cellIdx)==null ? createHSSFRow(rowIdx).createCell(cellIdx) : sheet.getRow(rowIdx).createCell(cellIdx);     }        public void setCellValue(int rowIdx, short cellIdx, String value) throws FileNotFoundException, IOException {    	HSSFRichTextString strValue = new HSSFRichTextString(value);    	createHSSFCell(rowIdx, cellIdx).setCellValue(strValue);    }     public void setCellValue(int rowIdx, short cellIdx, long value) throws FileNotFoundException, IOException {    	createHSSFCell(rowIdx, cellIdx).setCellValue(value);    }    public void setCellValue(int rowIdx, short cellIdx, double value) throws FileNotFoundException, IOException {    	createHSSFCell(rowIdx, cellIdx).setCellValue(value);    }    public void setCellStyleToTitle(int rowIdx, short cellIdx) throws FileNotFoundException, IOException {    	if( sheet.getRow(rowIdx).getCell(cellIdx) == null ) {    		createHSSFCell(rowIdx, cellIdx).setCellStyle(createTitleCellStyle());    	} else {    		sheet.getRow(rowIdx).getCell(cellIdx).setCellStyle(createTitleCellStyle());    	}    }       public void setCellStyleToData(int rowIdx, short cellIdx) throws FileNotFoundException, IOException {    	if( sheet.getRow(rowIdx).getCell(cellIdx) == null ) {    		createHSSFCell(rowIdx, cellIdx).setCellStyle(createDataCellStyle());    	} else {    		sheet.getRow(rowIdx).getCell(cellIdx).setCellStyle(createDataCellStyle());    	}    }    public void setCellStyle(int rowIdx, short cellIdx, HSSFCellStyle style) throws FileNotFoundException, IOException {    	if( sheet.getRow(rowIdx).getCell(cellIdx) == null ) {    		createHSSFCell(rowIdx, cellIdx).setCellStyle(style);    	} else {    		sheet.getRow(rowIdx).getCell(cellIdx).setCellStyle(style);    	}    }       public void setWidth(String cellName, short width) {    	if(sheet !=null ) {    		sheet.setColumnWidth(getCellNum(cellName), width);    	}    }    public int getWidth(String cellName) {    	return sheet.getColumnWidth(getCellNum(cellName));    }        public void setHeight(int rowIdx, short height) {    	if( sheet.getRow(rowIdx)!=null ) {    		sheet.getRow(rowIdx).setHeight(height);    	}    }        public void span(int rowFrom, short colFrom, int rowSpanLength, short colSpanLength) {    	sheet.addMergedRegion(new Region(rowFrom, colFrom, rowFrom+rowSpanLength, (short)(colFrom+colSpanLength)));    }    public void addMergedRegion(int rowFrom, short colFrom, int rowTo, short colTo) {    	sheet.addMergedRegion(new Region(rowFrom, colFrom, rowTo, colTo));    }    public void addMergedRegion(int rowFrom, int colFrom, int rowTo, int colTo) {    	sheet.addMergedRegion(new Region(rowFrom, (short)colFrom, rowTo, (short)colTo));    }    public short getCellNum(String cellName) {    	short cellNum = 0;    	for( int k=0 ; k<cellName.length() ; k++) {    		cellNum += ((k*25)+ ( k==0 ? 0 : 1 ) + ((int) cellName.charAt(k)) - 65);    	}    	return cellNum;    }        public String getCellName(short cellNum) {    	String cellName = "";    			if( cellNum > 26 ) {			cellName = String.valueOf((char)(65+(cellNum/26)-1)) + String.valueOf((char)(65+(cellNum%26)-1));		} else {			cellName = String.valueOf((char)(65+cellNum -1));		}    	return cellName;    }      	public HSSFCellStyle createTitleCellStyle() {		HSSFCellStyle cell_style = workbook.createCellStyle();		HSSFFont font = workbook.createFont();		// Border, Foreground Color Setting		cell_style.setBorderBottom(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderLeft(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderRight(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderTop(HSSFCellStyle.BORDER_THIN);		cell_style.setFillPattern((short)1);		cell_style.setFillForegroundColor((short)23);		// Font Setting		font.setFontHeightInPoints((short)10);		font.setColor((short)9);		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);				cell_style.setFont(font);						return cell_style;			}		public HSSFCellStyle createDataCellStyle() {		HSSFCellStyle cell_style = workbook.createCellStyle();		HSSFFont font = workbook.createFont();				// Border, Foreground Color Setting		cell_style.setBorderBottom(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderLeft(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderRight(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderTop(HSSFCellStyle.BORDER_THIN);						// Font Setting		font.setFontHeightInPoints((short)9);						cell_style.setFont(font);						return cell_style;			}}