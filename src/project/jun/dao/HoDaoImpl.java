package project.jun.dao;import java.sql.SQLException;import java.util.List;import javax.naming.NamingException;import project.jun.dao.parameter.HoQueryParameterMap;import project.jun.dao.result.HoMap;import project.jun.dao.result.HoList;import project.jun.was.result.exception.HoException;public class HoDaoImpl extends HoDao {	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#queryForInfo(java.lang.String)	 */	public HoMap queryForInfo(String sqlId) 	{				return super.queryForInfo(sqlId);	}	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#queryForInfo(java.lang.String)	 */	public HoMap queryForInfo(String sqlId, HoQueryParameterMap value)	{				return super.queryForInfo(sqlId, value);	}	/**	 * 0건이상의 정보를 가져온다.	 */	public HoList queryForList(String sqlId) 	{				return super.queryForList(sqlId);	}	/**	 * 0건이상의 정보를 가져온다.	 */	public HoList queryForList(String sqlId, HoQueryParameterMap value) 	{				return super.queryForList(sqlId, value);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int execute(String sqlId) throws NamingException, SQLException, HoException {		return super.update(sqlId);	}		/**	 * CUD를 실행한다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int execute(String sqlId, HoQueryParameterMap value) throws NamingException, SQLException, HoException {		return super.update(sqlId, value);	}	/**	 * PROCEDURE를 실행한다.	 * ex) 	{call 프로시져명(#변수명,javaType=java.lang.String,jdbcType=컬럼형태,mode=모드#,										:     					  #USER_EMPID,jdbcType=VARCHAR,mode=IN# ,     					  #ERROR_MSG,javaType=java.lang.String,jdbcType=VARCHAR,mode=OUT#)}     					       		1. 변수명   : HoQueryParameterMap의 값     		2. 컬럼형태 : VARCHAR, NUMBER     		3. 모드     : IN/OUT	 */	public HoMap call(String sqlId, HoQueryParameterMap value) 	{				return super.call(sqlId, value);	}		/**	 * BATCH를 실행한다.	 * @param sql	 * @param values	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int batch(String sqlId, HoQueryParameterMap [] values)throws NamingException, SQLException, HoException {		return super.batch(sqlId, values);	}		/**	 *  SQL을 직접 실행하여 1건의 정보를 가져온다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public HoMap queryForInfoSql(String sql) throws NamingException, SQLException, HoException	{				return super.queryForInfoSql( sql, new HoQueryParameterMap());	}	/**	 *  SQL을 직접 실행하여 1건의 정보를 가져온다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public HoMap queryForInfoSql(String sql, HoQueryParameterMap value) throws NamingException, SQLException, HoException	{				return super.queryForInfoSql( sql, value);	}		/**	 *  SQL을 직접 실행하여 0건이상의 정보를 가져온다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public HoList queryForListSql(String sql) throws NamingException, SQLException, HoException	{				return super.queryForListSql( sql, new HoQueryParameterMap());	}	/**	 *  SQL을 직접 실행하여 1건의 정보를 가져온다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public HoList queryForListSql(String sql, HoQueryParameterMap value) throws NamingException, SQLException, HoException	{				return super.queryForListSql( sql, value);	}	/**	 * SQL을 직접 실행하여 CUD를 실행한다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int updateSql(String sql) throws NamingException, SQLException, HoException	{		return super.updateSql( sql, new HoQueryParameterMap());	}	/**	 * SQL을 직접 실행하여 CUD를 실행한다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int updateSql(String sql, HoQueryParameterMap value) throws NamingException, SQLException, HoException	{		return super.updateSql( sql, value);	}		/**	 * SQL을 직접 실행하여 batch를 실행한다.	 * @param sql	 * @param value	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int [] batchSql(String sql, List value) throws NamingException, SQLException, HoException	{		return super.batchSql( sql, value);	}		}