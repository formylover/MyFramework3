package project.jun.dao.result.handler;import java.sql.Blob;import java.sql.CallableStatement;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import org.apache.ibatis.type.BaseTypeHandler;import org.apache.ibatis.type.JdbcType;import org.apache.ibatis.type.TypeHandler;import oracle.sql.BLOB;public class HoOracleBlobByteArrayTypeHandler extends BaseTypeHandler implements		TypeHandler {    public void setParameter(PreparedStatement ps, int i, Object parameter            , String jdbcType) throws SQLException {        byte [] bytes = (byte []) parameter;        if (bytes != null) {            BLOB blob = BLOB.createTemporary(ps.getConnection(), true                , BLOB.DURATION_SESSION);            // blob.putBytes(1, bytes); // to support old jdbc drivers.            blob.setBytes(1, bytes);             ps.setBlob(i, blob);                    } else {            ps.setBlob(i, (Blob) null);        }    }    public Object getResult(ResultSet rs, String columnName)            throws SQLException {        Blob blob = rs.getBlob(columnName);        if (rs.wasNull()) {            return null;        } else {            return blob.getBytes(1, (int) blob.length());              }    }    public Object getResult(ResultSet rs, int columnIndex)            throws SQLException {        Blob blob = rs.getBlob(columnIndex);        if (rs.wasNull()) {            return null;        } else {            return blob.getBytes(1, (int) blob.length());              }    }    public Object getResult(CallableStatement cs, int columnIndex)            throws SQLException {        Blob blob = cs.getBlob(columnIndex);        if (cs.wasNull()) {            return null;        } else {            return blob.getBytes(1, (int) blob.length());              }    }    public Object valueOf(String s) {        return s.getBytes();    }	@Override	public Object getNullableResult(ResultSet arg0, String arg1)			throws SQLException {		// TODO Auto-generated method stub		return null;	}	@Override	public Object getNullableResult(CallableStatement arg0, int arg1)			throws SQLException {		// TODO Auto-generated method stub		return null;	}	@Override	public void setNonNullParameter(PreparedStatement arg0, int arg1,			Object arg2, JdbcType arg3) throws SQLException {		// TODO Auto-generated method stub			}}