package project.jun.dao.result.handler;import java.sql.CallableStatement;import java.sql.Clob;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import org.apache.ibatis.type.BaseTypeHandler;import org.apache.ibatis.type.JdbcType;import org.apache.ibatis.type.TypeHandler;import oracle.sql.CLOB;public class HoOracleClobStringTypeHandler extends BaseTypeHandler implements		TypeHandler {	   public void setParameter(PreparedStatement ps, int i, Object parameter	            , String jdbcType) throws SQLException {	        String value = (String) parameter;	        if (value != null) {	            CLOB clob = CLOB.createTemporary(ps.getConnection(), true	                , CLOB.DURATION_SESSION);	            clob.putChars(1, value.toCharArray());	            ps.setClob(i, clob);	        } else {	            ps.setString(i, null);	        }	    }	    public Object getResult(ResultSet rs, String columnName)	            throws SQLException {	        Clob clob = rs.getClob(columnName);	        if (rs.wasNull()) {	            return null;	        } else {	            return clob.getSubString(1, (int) clob.length());	        }	    }	    public Object getResult(ResultSet rs, int columnIndex)	            throws SQLException {	        Clob clob = rs.getClob(columnIndex);	        if (rs.wasNull()) {	            return null;	        } else {	            return clob.getSubString(1, (int) clob.length());	        }	    }	    public Object getResult(CallableStatement cs, int columnIndex)	            throws SQLException {	        Clob clob = cs.getClob(columnIndex);	        if (cs.wasNull()) {	            return null;	        } else {	            return clob.getSubString(1, (int) clob.length());	        }	    }	    public Object valueOf(String s) {	        return s;	    }		public void setParameter(PreparedStatement arg0, int arg1, Object arg2,				JdbcType arg3) throws SQLException {			// TODO Auto-generated method stub					}		@Override		public Object getNullableResult(ResultSet arg0, String arg1)				throws SQLException {			// TODO Auto-generated method stub			return null;		}		@Override		public Object getNullableResult(CallableStatement arg0, int arg1)				throws SQLException {			// TODO Auto-generated method stub			return null;		}		@Override		public void setNonNullParameter(PreparedStatement arg0, int arg1,				Object arg2, JdbcType arg3) throws SQLException {			// TODO Auto-generated method stub					}}