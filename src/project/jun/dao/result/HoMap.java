package project.jun.dao.result;import java.sql.Clob;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.apache.ibatis.metadata.result.MetaData;import project.jun.util.HoFomatter;import project.jun.util.HoUtil;public class HoMap extends HoResult {	private  Map      obj = null;	public HoMap() {		this.obj = new HashMap();	}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Objec가 List형태이고, 	 * 첫번째 정보가 ResultSetMetaData정보일 경우 	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 쿼리 결과값은 Map객체에 넣는다.	 * @param obj	 */	public HoMap( Object obj)	{		if( obj!=null && obj instanceof List && ((List)obj).size() > 0 && ((List)obj).get(0) instanceof MetaData) {			super.setMetaData((MetaData) ((List)obj).get(0));			if( ((List)obj).size() > 1) {				this.obj = (Map) ((List)obj).get(1);					}		} else if( obj instanceof Map ) {			this.obj = (Map) obj;			}			}		/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Map일 경우 	 * 쿼리 결과값은 Map객체에 넣는다.	 * (MetaData정보는 null임)	 * @param obj	 */	public HoMap( Map obj )	{		this.obj = obj;			}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 List이고, 	 * 첫번째 정보가 ResultSetMetaData정보일 경우 	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 쿼리 결과값은 Map객체에 넣는다.	 * @param obj	 */	public HoMap( List list )	{		if( list!=null && list.size() > 0 && list.get(0) instanceof MetaData) {			super.setMetaData((MetaData) list.get(0));			if( list.size() > 1) {				this.obj = (Map) list.get(1);					}		} else if( list!=null && list.size() > 0 && list.get(0) instanceof Map ) {			this.obj = (Map) list.get(0);			} else {			this.obj = new HashMap();		}	}	/**	 * <pre>	 * WizMap의 row의 MetaData Key Set을 조회한다.	 * </pre>	 * @param list	 * @return	 * @exception	 * @see	 */	public Set getKetSet() {		Set keySet = null;		// Record의 key를 조회한다.		if( obj != null ) {			keySet = new TreeSet(obj.keySet());		}		return keySet;	}		/**	 * 쿼리결과의 컬럼필드를 Iterator로 return한다.	 * 단, 쿼리 결과가 있어야 사용가능함..	 * @return	 */    public Iterator keyIterator() {		Set keySet = null;		if( obj != null ) {			keySet = new TreeSet(obj.keySet());		}				if( keySet != null ) {			return keySet.iterator();		} else {			return null;		}    }    	/**	 * 쿼리 결과를 Map으로 얻는다.	 * @return	 */	public Map getMap() {		return this.obj;	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 Object 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param fieldName	 * @return	 */	public Object get( String fieldName ){		return this.obj.get(fieldName.toUpperCase());	}		/**	 * 쿼리 결과중 fieldName컬럼의 값을 value로 변경하거나,	 * 쿼리 결과에 fieldName이 없을 경우 value로 추가한다.	 * @param fieldName	 * @param value	 * @return	 */	public Object put( String fieldName, Object value )	{		return this.obj.put(fieldName, value);	}	/**	 * 쿼리 결과값이 없는지 확인	 * @return boolean	 */	public boolean isEmpty() {		if( this.obj == null ) {			return true;		}				return this.obj.isEmpty();	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 ""를 return	 * @param fieldName	 * @return	 */	public String getString( String fieldName ) {		return getString(fieldName, "");	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param fieldName	 * @param defaultValue	 * @return	 */	public String getString(String fieldName, String defaultValue ) {		try {			Object obj = get(fieldName);			if( obj == null )				return defaultValue;			else if( obj instanceof String ) {				if( getType(fieldName) == YMD || getType(fieldName) == DATE ) {					return HoFomatter.toDateFormat(obj, displayFormat);				} else {					return (String)obj;				}			} else if( obj instanceof Clob )				return HoUtil.getStringForCLOB((Clob)obj);			else if( obj instanceof Date) 				return HoFomatter.toDateFormat(obj, displayFormat);			else {				if( getType(fieldName) == YMD || getType(fieldName) == DATE  ) {					return HoFomatter.toDateFormat((String)obj, displayFormat);				} else if(getType(fieldName) == HMS || getType(fieldName) == HM  ) {					return HoFomatter.toTimeFormat(obj, displayFormat);				} else if(getType(fieldName) == INT ) {					return HoFomatter.toIntFormat(obj, displayFormat.get("INT").toString());				} else if(getType(fieldName) == CURRENCY ) {					return HoFomatter.toCurrencyFormat(obj, displayFormat.get("CURRENCY").toString());				} else if(getType(fieldName) == POINT ) {					return getPointFormat(fieldName);				} else {					return obj.toString();				}			}		}		catch( Exception e) {			return defaultValue;		}	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param fieldName	 * @return	 */	public int getInt( String fieldName )	{		return getInt(fieldName, 0);	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param fieldName	 * @return	 */	public int getInt( String fieldName, int detaultValue )	{		Object obj = get( fieldName);		if( obj == null )			return detaultValue;		else if( obj instanceof Number ) {			Number num = (Number)obj;			return num.intValue();		}		else if( obj instanceof String )			return Integer.parseInt(obj.toString());		else			return detaultValue;	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0L을 return	 * @param fieldName	 * @return	 */	public long getLong( String fieldName )	{		return getLong(fieldName, 0L);	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param fieldName	 * @return	 */	public long getLong( String fieldName,  long detaultValue)	{		Object obj = get( fieldName);		if( obj == null )			return detaultValue;		else if( obj instanceof Number )				return ((Number)obj).longValue();		else if( obj instanceof String )			return Long.parseLong(obj.toString());		else			return detaultValue;	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param fieldName	 * @return	 */	public double getDouble( String fieldName )	{		return getDouble(fieldName, 0);	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param fieldName	 * @return	 */	public double getDouble( String fieldName, long detaultValue )	{		Object obj = get( fieldName);		if( obj == null )			return detaultValue;		else if( obj instanceof Number )				return ((Number)obj).doubleValue();		else if( obj instanceof String )			return Double.parseDouble(obj.toString());		else			return detaultValue;	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 escape형태로 return	 * (&, >, <, ', \, \\x28, \\x29, \r\n, \n, ' ', \t)문자만 변경	 * @param fieldName	 * @return	 */	public String getStringForHtml( String fieldName )	{		return HoUtil.escapeForHtml(getString(fieldName));			}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 escape형태로 return	 * (&, >, <, ', \)문자만 변경	 * @param fieldName	 * @return	 */	public String getStringForInput( String fieldName )	{		return HoUtil.escapeForInput(getString(fieldName));			}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 ###,###,###,###,###,###,###형태로 return	 * @param fieldName	 * @return	 */	public String getCurrencyFormat( String fieldName )	{		return HoFomatter.toCurrencyFormat(get(fieldName), displayFormat.get("CURRENCY").toString());	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 format형태로 return	 * @param fieldName	 * @return	 */	public String getCurrencyFormat( String fieldName, String format) {		return HoFomatter.toNumbericFormat(get(fieldName), format);	}			/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 ###,###,###,###,###,###,###.000형태로 return	 * @param fieldName	 * @return	 */	public String getPointFormat( String fieldName )	{		return HoFomatter.toPointFormat(getString(fieldName), super.getPointFormat(fieldName));	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 ###,###,###,###,###,###,###.000형태로 return	 * @param fieldName	 * @return	 */	public String getPointFormat( String fieldName, String format )	{		return HoFomatter.toPointFormat(getString(fieldName), format);	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 "#,##0.00"형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param fieldName	 * @return	 */	public String getNumberFormat( String fieldName )	{		return HoFomatter.toNumberFormat( get(fieldName), displayFormat.get("NUMBER").toString()  );	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param fieldName	 * @return	 */	public String getNumberFormat( String fieldName, String format )	{		return getNumberFormat(fieldName, "0", format);	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param fieldName	 * @return	 */	public String getNumberFormat( String fieldName, String defaultValue, String format )	{		DecimalFormat commaFormat = new DecimalFormat(format);		int pos = format.indexOf(".");		try {			Number value = (Number)get(fieldName);			if( value == null ) {				if (pos!=-1) { 					return commaFormat.format(0.0);				} else {					return commaFormat.format(0L);				}			} else {				if (pos!=-1) { 					return commaFormat.format(value.doubleValue());				} else {					return commaFormat.format(value.longValue());				}			}		}		catch( Exception e) {			return defaultValue;		}	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param fieldName	 * @return	 */		public String getDateFormat(String fieldName ) {		return HoFomatter.toDateFormat( get(fieldName), displayFormat ); 	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param fieldName	 * @return	 */	public String getDateTimeFormat( String fieldName )	{		return HoFomatter.toDateTimeFormat( get(fieldName), displayFormat ); 	}	/**	 * 쿼리 결과 Map을 String으로 return한다.	 */	public String toString() {		if( this.obj == null) {			return null;		} else {			return this.obj.toString();		}	}	/**	 * <pre>	 * WizMapList의 각각의 row에 해당하는 정보를 element로 만들어 준다.	 * </pre>	 * @param list	 * @param rowCnt	 * @return	 * @exception	 * @see	 */	public String toXML(String id) {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.		sbRow.append("<dataset id=\""+id+"\">\n");				sbRow.append("	<record>\n");		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			sbRow.append("		<" + getMetaData().getColumnName(i).toUpperCase() + ">");			sbRow.append("<![CDATA[" + this.getString(getMetaData().getColumnName(i)) + "]]>");			sbRow.append("</" + getMetaData().getColumnName(i).toUpperCase() + ">\n");		}		sbRow.append("	</record>\n");		sbRow.append("</dataset>");		return sbRow.toString();	}	/**	 * <pre>	 *  javascript형태	 * </pre>	 */	public String toJavascriptDataArray() {		StringBuffer sbRow = new StringBuffer(1024);		sbRow.append('[');		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');			}			sbRow.append("'" +HoUtil.toJsonString(getString(getMetaData().getColumnName(i)))+ "'");		}		sbRow.append("];\n");		return sbRow.toString();	}		/**	 * 'columnValue1', 'columnValue2', 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptArgString( ) {		StringBuffer sb = new StringBuffer();		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(getMetaData().getColumnName(i))));			sb.append('\'');		}		return sb.toString();	}	/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel() {		String [] arrSet = new String[getMetaData().getColumnCount()];				for( int i=0; i<getMetaData().getColumnCount(); i++) {			arrSet[i] = getMetaData().getColumnName(i);		}		return toJsonCamel(arrSet);	}		/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(Set set) {				Iterator it = set.iterator();				String [] arrSet = new String[set.size()];				for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}				return toJsonCamel(arrSet);	}		/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(String [] set) {		StringBuffer sb = new StringBuffer();				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(HoUtil.toCamel(set[i]));			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(set[i].toUpperCase())));			sb.append('\'');		}		return sb.toString();	}		/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson() {		String [] arrSet = new String[getMetaData().getColumnCount()];				for( int i=0; i<getMetaData().getColumnCount(); i++) {			arrSet[i] = getMetaData().getColumnName(i);		}		return toJson(arrSet);	}		/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(Set set) {				Iterator it = set.iterator();				String [] arrSet = new String[set.size()];				for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}				return toJson(arrSet);	}	/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(String [] set) {		StringBuffer sb = new StringBuffer();				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(set[i]);			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(set[i].toUpperCase())));			sb.append('\'');		}		return sb.toString();	}		/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(String [][] set) {		StringBuffer sb = new StringBuffer();				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(set[i][0]);			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(set[i][1].toUpperCase())));			sb.append('\'');		}		return sb.toString();	}	/**	 * { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject() {				String [] arrSet = new String[getMetaData().getColumnCount()];		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			arrSet[i] = getMetaData().getColumnName(i);		}				return toJavaScriptObject(arrSet);	}	/**	 * Set에 해당하는 column을 가지고 { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(Set set) {		String [] arrSet = new String[set.size()];				Iterator it = set.iterator();		for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}				return toJavaScriptObject(arrSet);	}		/**	 * Set에 해당하는 column을 가지고 { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(String [] set) {		StringBuffer sb = new StringBuffer();		sb.append('{');				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(set[i].toUpperCase());			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(set[i].toUpperCase())));			sb.append('\'');		}		sb.append('}');						return sb.toString();	}	}