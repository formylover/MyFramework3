package project.jun.dao.result;import java.sql.Types;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;import org.apache.ibatis.metadata.result.MetaData;import project.jun.util.HoUtil;public class HoResult {	final static int STRING   = 1;	final static int CURRENCY = 2; // 돈	final static int DATE     = 11; // 날짜	final static int YMD      = 3; // 년월일	final static int HMS      = 4; // 시분초	final static int HM       = 5; // 시분	final static int POINT    = 6; // 소숫점	final static int CLOB     = 7; // CLOB	final static int BLOB     = 8; // BLOB	final static int LONG     = 9; // LONG	final static int INT      = 10; // INT	private  MetaData metaData = null;	protected  Map      displayFormat          = null;	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public Map getDisplayFormat() {		return this.displayFormat;	}	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public void setDisplayFormat(Map displayFormat) {		if( this.displayFormat == null ) {			this.displayFormat          = new HashMap();		}		this.displayFormat.putAll(displayFormat);	}		/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public void setDisplayFormat(String key, String displayFormat) {		if( this.displayFormat == null ) {			this.displayFormat          = new HashMap();		}		this.displayFormat.put(key, displayFormat);	}		/**	 *  ResultSetMetaData정보를 set	 * @return	 */    public void setMetaData(MetaData metaData) {    	this.metaData = metaData;    }    	/**	 * 쿼리결과의 ResultSetMetaData정보를 return	 * @return	 */	public MetaData getMetaData() {		return this.metaData;	}		/**	 * MetaData정보를 string으로 만든다.	 * @return	 */	public String getMetaDataString() {		StringBuffer sbRow = new StringBuffer(1024);		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');				if( i%5 == 0 ) {					sbRow.append("\r\n");				}			}			sbRow.append("'"+getMetaData().getColumnName(i)+"'");	   } 		return sbRow.toString();	}		/**	 * MetaData정보를 string으로 만든다.	 * @return	 */	public String getMetaDataString( String prefix ) {		StringBuffer sbRow = new StringBuffer(1024);		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');				if( i%5 == 0 ) {					sbRow.append("\r\n");				}			}			sbRow.append("{ "+prefix+" : '"+getMetaData().getColumnName(i)+"' } ");	   } 		return sbRow.toString();	}		/**	 * <pre>	 * id 있는 javascript형태	 * </pre>	 */	public String toMetaDataJavascriptArray() {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.		sbRow.append('[');		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');			}			sbRow.append("'"+getMetaData().getColumnName(i)+"'");	   } 		sbRow.append("];");		return sbRow.toString();	}		/**	 * 필드(컬럼)명이 날짜 인지 확인한다.	 * @param fieldNam	 * @return	 */	public int getType(String fieldName) {		int columnIndex = this.getMetaData().getColumnIndex(fieldName);		if( columnIndex < 0 ) {			return STRING;		}		int columnType = this.getMetaData().getColumnType(columnIndex);				if( columnType == Types.DATE ) {			return DATE;		} 		// 숫자 		else if( columnType == Types.BIGINT  || columnType == Types.NUMERIC || columnType == Types.DECIMAL ) {			if( fieldName.toUpperCase().endsWith("_AMT")					|| fieldName.toUpperCase().endsWith("_COST")) {				return CURRENCY;			} else {				return INT;			}		} 		// 소숫점 숫자 		else if( columnType == Types.DOUBLE || columnType == Types.FLOAT ) {			return POINT;		} 		// CLOB 		else if( columnType == Types.CLOB ) {			return CLOB;		} 		// BLOB 		else if( columnType == Types.BLOB ) {			return BLOB;		} 		// LONG 		else if( columnType == Types.LONGVARCHAR  || columnType == Types.LONGVARBINARY ) {			return LONG;		} else {			if( fieldName.toUpperCase().endsWith("_YMD")) {				return YMD;			} else if( fieldName.toUpperCase().endsWith("_DT")					|| fieldName.toUpperCase().endsWith("_DATE")) {				return DATE;			}			// 시분초로 판단되는 경우			else if(fieldName.toUpperCase().endsWith("_HMS")) {				return HMS;			} 			// 시분로 판단되는 경우			else if( fieldName.toUpperCase().endsWith("_HM")) {				return HM;			} 			// 금액으로 판단되는 경우			else if( fieldName.toUpperCase().endsWith("_AMT")					|| fieldName.toUpperCase().endsWith("_COST")) {				return CURRENCY;			} 			// 소숫점 			else if( this.getMetaData().getScale(columnIndex) > 0 ) {				return POINT;			} 			else {				return STRING;			}		}	}		protected String getPointFormat(String fieldName) {		int columnIdx = getMetaData().getColumnIndex(fieldName);				String format = displayFormat.get("POINT").toString();		if( columnIdx >= 0 && getMetaData().getPrecision(columnIdx) > 0) {			String precision = "";						if( getMetaData().getPrecision(columnIdx) > 0 ) {				precision = HoUtil.rPad("0", getMetaData().getPrecision(columnIdx), "0");								return format = format.replaceAll(".00", "."+precision);			} 		}		return format;	}}