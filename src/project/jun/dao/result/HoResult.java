package project.jun.dao.result;import java.sql.Types;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;import org.apache.ibatis.metadata.result.MetaData;import project.jun.util.HoUtil;public class HoResult {	final static int STRING   = 1;	final static int CURRENCY = 2; // 돈	final static int YMD      = 3; // 날짜	final static int HMS      = 4; // 시분초	final static int HM       = 5; // 시분	final static int POINT    = 6; // 소숫점	final static int CLOB     = 7; // CLOB	final static int BLOB     = 8; // BLOB	final static int LONG     = 9; // LONG	final static int INT      = 10; // INT	private  MetaData metaData = null;	private  Map      displayFormat          = null;	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public Map getDisplayFormat() {		return this.displayFormat;	}	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public void setDisplayFormat(Map displayFormat) {		if( this.displayFormat == null ) {			this.displayFormat          = new HashMap();		}		this.displayFormat.putAll(displayFormat);	}		/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public void setDisplayFormat(String key, String displayFormat) {		if( this.displayFormat == null ) {			this.displayFormat          = new HashMap();		}		this.displayFormat.put(key, displayFormat);	}		/**	 *  ResultSetMetaData정보를 set	 * @return	 */    public void setMetaData(MetaData metaData) {    	this.metaData = metaData;    }    	/**	 * 쿼리결과의 ResultSetMetaData정보를 return	 * @return	 */	public MetaData getMetaData() {		return this.metaData;	}		/**	 * MetaData정보를 string으로 만든다.	 * @return	 */	public String getMetaDataString() {		StringBuffer sbRow = new StringBuffer(1024);		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');				if( i%5 == 0 ) {					sbRow.append("\r\n");				}			}			sbRow.append("'"+getMetaData().getColumnName(i)+"'");	   } 		return sbRow.toString();	}		/**	 * <pre>	 * id 있는 javascript형태	 * </pre>	 */	public String toMetaDataJavascriptArray() {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.		sbRow.append('[');		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');			}			sbRow.append("'"+getMetaData().getColumnName(i)+"'");	   } 		sbRow.append("];");		return sbRow.toString();	}		/**	 * 필드(컬럼)명이 날짜 인지 확인한다.	 * @param fieldNam	 * @return	 */	public int getType(String fieldName) {		int columnIndex = this.getMetaData().getColumnIndex(fieldName);		if( columnIndex == -1 ) {			return STRING;		}		int columnType = this.getMetaData().getColumnType(columnIndex);				if( columnType == Types.DATE ) {			return YMD;		} 		// 숫자 		else if( columnType == Types.BIGINT  || columnType == Types.NUMERIC || columnType == Types.DECIMAL ) {			if( fieldName.toUpperCase().endsWith("_AMT")					|| fieldName.toUpperCase().endsWith("_COST")) {				return CURRENCY;			} else {				return INT;			}		} 		// 소숫점 숫자 		else if( columnType == Types.DOUBLE || columnType == Types.FLOAT ) {			return POINT;		} 		// CLOB 		else if( columnType == Types.CLOB ) {			return CLOB;		} 		// BLOB 		else if( columnType == Types.BLOB ) {			return BLOB;		} 		// LONG 		else if( columnType == Types.LONGVARCHAR  || columnType == Types.LONGVARBINARY ) {			return LONG;		} else {			if( fieldName.toUpperCase().endsWith("_YMD")					|| fieldName.toUpperCase().endsWith("_DT")					|| fieldName.toUpperCase().endsWith("_DATE")) {				return YMD;			} 			// 시분초로 판단되는 경우			else if(fieldName.toUpperCase().endsWith("_HMS")) {				return HMS;			} 			// 시분로 판단되는 경우			else if( fieldName.toUpperCase().endsWith("_HM")) {				return HM;			} 			// 금액으로 판단되는 경우			else if( fieldName.toUpperCase().endsWith("_AMT")					|| fieldName.toUpperCase().endsWith("_COST")) {				return CURRENCY;			} 			// 소숫점 			else if( this.getMetaData().getScale(columnIndex) > 0 ) {				return POINT;			} 			else {				return STRING;			}		}	}		public String toYmdFormat(Object oriValue) {		if( oriValue instanceof String) {			String value = oriValue.toString();			try {				SimpleDateFormat sdf = null;				Date date = null;				// 길이가 14일경우에는 yyyy-MM-dd hh24:mi:ss				if( value.length() == 14 ) {					sdf = new SimpleDateFormat("yyyyMMddHHmmss");					date = sdf.parse(value);					return (new SimpleDateFormat(displayFormat.get("YMD").toString() + displayFormat.get("HMS").toString())).format(date);				} 				// 길이가 12일경우에는 yyyy-MM-dd hh24:mi				else if( value.length() == 12 ) {					sdf = new SimpleDateFormat("yyyyMMddHHmm");					date = sdf.parse(value);					return (new SimpleDateFormat(displayFormat.get("YMD").toString() + displayFormat.get("HM"))).format(date);				}				// 길이가 8일경우에는 yyyy-MM-dd				else if( value.length() == 8 ) {					sdf = new SimpleDateFormat("yyyyMMdd");					date = sdf.parse(value);					return (new SimpleDateFormat((String) displayFormat.get("YMD"))).format(date);				} 				// 길이가 6일경우에는 yyyy-MM				else if( value.length() == 6 ){					sdf = new SimpleDateFormat("yyyyMM");					date = sdf.parse(value);					return (new SimpleDateFormat((String) displayFormat.get("YM"))).format(date);				} 				// 길이가 4일경우에는 yyyy				else if( value.length() == 4 ){					sdf = new SimpleDateFormat("yyyyMM");					date = sdf.parse(value);					return (new SimpleDateFormat((String) displayFormat.get("Y"))).format(date);				} else {					return value;				}			} catch(Exception e) {				return value;			}			} else if( oriValue instanceof Date) {			return (new SimpleDateFormat(displayFormat.get("YMD").toString())).format(oriValue);		} else {			return oriValue.toString();		}	}			public String toCurrencyFormat(Object value) {		java.text.DecimalFormat df = new java.text.DecimalFormat( displayFormat.get("CURRENCY").toString() );		String reslut = null;				try {			reslut = df.format( value );		}		catch( Exception e )		{			reslut = "0";		}				return reslut;	}		public String toPointFormat(Object value, String columnName) {		int columnIdx = getMetaData().getColumnIndex(columnName);		String pointFormat =  displayFormat.get("POINT").toString();		if( getMetaData().getPrecision(columnIdx) > 0 ) {			String precision = HoUtil.rPad("0", getMetaData().getPrecision(columnIdx), "0");						pointFormat.replaceAll(".00", "."+precision);		}				java.text.DecimalFormat df = new java.text.DecimalFormat( pointFormat );		String reslut = null;				try {			reslut = df.format( value );		}		catch( Exception e )		{			reslut = "0";		}				return reslut;			}	public String toIntFormat(Object value) {		java.text.DecimalFormat df = new java.text.DecimalFormat( displayFormat.get("INT").toString() );		String reslut = null;				try {			reslut = df.format( value );		}		catch( Exception e )		{			reslut = "0";		}				return reslut;	}}