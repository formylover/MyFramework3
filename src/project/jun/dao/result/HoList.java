package project.jun.dao.result;import java.sql.Clob;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.apache.ibatis.metadata.result.MetaData;import project.jun.util.HoUtil;public class HoList  extends HoResult {	private List     list = null;	public HoList()	{		this.list = new ArrayList();			}		/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Objec가 List형태이고, 	 * 첫번째 정보가 ResultSetMetaData정보일 경우 	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 부터의 쿼리 결과값은 List객체에 넣는다.	 * @param obj	 */	public HoList( List list )	{				if( list!=null && list.size() > 0 && list.get(0) instanceof MetaData) {			super.setMetaData((MetaData) list.get(0));			list.remove(0);		}		this.list = list;		}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Objec가 List형태이고, 	 * 첫번째 정보가 ResultSetMetaData정보일 경우 	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 부터의 쿼리 결과값은 List객체에 넣는다.	 * @param obj	 */	public void setList( List list )	{		if( list!=null && list.size() > 0 && list.get(0) instanceof MetaData) {			super.setMetaData((MetaData) list.get(0));			list.remove(0);		}		this.list = list;			}	/**	 * 실제 결과 List를 조회한다.	 * @return	 */	public List getList() {		return this.list;	}	/**	 * 실제 결과중 idx에 해당하는 결과를 구한다.	 * @param idx	 * @return	 */	public Map get( int idx )	{		if( idx < this.list.size() )			return (Map) this.list.get(idx);		else			return null;	}		/**	 * 실제 결과중 idx에 해당하는 결과를 구한다.	 * @param idx	 * @return	 */	public Map getRecord( int idx )	{		if( idx < this.list.size() )			return (Map) this.list.get(idx);		else			return null;	}		/**	 * 실제 결과중 idx에 해당하는 결과를 구한다.	 * @param idx	 * @return	 */	public HoMap toHoMap( int idx )	{		if( idx < this.list.size() ) {			List hoMapList = new ArrayList();			hoMapList.add(this.getMetaData());			hoMapList.add(this.list.get(idx));			return new HoMap(hoMapList);		} else			return null;	}			/**	 * 결과값의 크기를 구한다.	 * @return	 */	public int size()	{		return this.list.size();			}	/**	 * <pre>	 * WizMapList의 row의 MetaData Key Set을 조회한다.	 * </pre>	 * @param list	 * @return	 * @exception	 * @see	 */	public Set getKetSet() {		Map map = null;		Set keySet = null;		if( size() > 0 ) {			// ResultSetMetaData정보를 조회한다.			map = getRecord(0);			// Record의 key를 조회한다.			keySet = new TreeSet(map.keySet());		}		return keySet;	}		/**	 * 쿼리결과의 컬럼필드를 Iterator로 return한다.	 * 단, 쿼리 결과가 있어야 사용가능함..	 * @return	 */    public Iterator keyIterator() {		Map map = null;		Set keySet = null;		if( size() > 0 ) {			// ResultSetMetaData정보를 조회한다.			map = getRecord(0);			// Record의 key를 조회한다.			keySet = new TreeSet(map.keySet());		}				if( keySet != null ) {			return keySet.iterator();		} else {			return null;		}    } 	/**	 * 쿼리 결과값이 없는지 확인	 * @return boolean	 */	public boolean isEmpty() {		if( this.list == null ) {			return true;		}				return (this.size() == 0);	}		/**	 * <pre>	 * WizMapList형태의 결과값을 WisDataList의 형태로 변환한다.	 * key값이 하나가 아니고, 조건에 의해 변해야 할 경우에는 	 * 각각의 DELEGATE에서 상황에 맞게 수정해서 사용한다.	 * </pre>	 * @param nRowIdx	 * @param fieldName	 * @return	 * @exception	 * @see	 */	public HoMapList toHoMapList(String key) {		HoMapList dataList = new HoMapList();				dataList.setMetaData(this.getMetaData());				for( int i=0 ; i<list.size() ; i++ ) {			dataList.setValue(getString(i, key), toHoMap(i));		}				return dataList;	}	/**	 * <pre>	 * 해당 index의 column명에 해당하는 원래의 객체정보를 가져온다.	 * </pre>	 * @param nRowIdx	 * @param fieldName	 * @return	 * @exception	 * @see	 */	public Object get( int nRowIdx, String fieldName )	{		Object map = this.list.get(nRowIdx);		if( map instanceof HoMap) {			return ((HoMap)map).get(fieldName.toUpperCase());		} else {			return ((Map)map).get(fieldName.toUpperCase());		} 	}	/**	 * <pre>	 * record를 추가한다.	 * </pre>	 * @param nRowIdx	 * @param fieldName	 * @return	 * @exception	 * @see	 */	public boolean add( Map record )	{		return this.list.add(record);	}		/**	 * <pre>	 * 해당 index의 column명에 객체를 삽입한다.	 * </pre>	 * @param nRowIdx	 * @param fieldName	 * @return	 * @exception	 * @see	 */	public Object put( int nRowIdx, String fieldName, Object value )	{		Map map = (Map)this.list.get(nRowIdx);		return map.put(fieldName, value);	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 ""를 return	 * @param fieldName	 * @return	 */	public String getString( int nRowIdx, String fieldName  )	{		return getString( nRowIdx, fieldName, ""  );	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param fieldName	 * @param defaultValue	 * @return	 */	public String getString( int nRowIdx, String fieldName, String defaultValue  )	{		try {			Object obj = get(nRowIdx, fieldName);			if( obj == null ) {				return defaultValue;			} else if( obj instanceof String ) {				if( getType(fieldName) == YMD ) {					return toYmdFormat((String)obj);				} else {					return (String)obj;				}			} else if( obj instanceof Clob ) {				return HoUtil.getStringForCLOB((Clob)obj);			} else if( obj instanceof Date) {				return toYmdFormat((Date)obj);			} else{				if( getType(fieldName) == YMD ) {					return toYmdFormat((String)obj);				} else if(getType(fieldName) == INT ) {					return toIntFormat(obj);				} else if(getType(fieldName) == CURRENCY ) {					return toCurrencyFormat(obj);				} else if(getType(fieldName) == POINT ) {					return toPointFormat(obj, fieldName);				} else {					return obj.toString();				}			}		}		catch( Exception e) {			e.printStackTrace();			return defaultValue;		}	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public int getInt( int nRowIdx, String fieldName )	{		return getInt(nRowIdx, fieldName, 0);	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param nRowIdx	 * @param fieldName	 * @param detaultValue	 * @return	 */	public int getInt( int nRowIdx, String fieldName, int detaultValue )	{		Object obj = get( nRowIdx, fieldName);		if( obj == null )			return detaultValue;		else if( obj instanceof Number ) {			Number num = (Number)obj;			return num.intValue();		}		else if( obj instanceof String )			return Integer.parseInt(obj.toString());		else			return detaultValue;	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0L을 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public long getLong( int nRowIdx, String fieldName )	{		return getLong( nRowIdx, fieldName, 0L);	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0L을 return	 * @param nRowIdx	 * @param fieldName	 * @param detaultValue	 * @return	 */	public long getLong( int nRowIdx, String fieldName, long detaultValue)	{		Object obj = get( nRowIdx, fieldName);		if( obj == null )			return detaultValue;		else if( obj instanceof Number )			return ((Number)obj).longValue();		else if( obj instanceof String )			return Long.parseLong(obj.toString());		else			return detaultValue;	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public double getDouble( int nRowIdx, String fieldName )	{		return getDouble( nRowIdx, fieldName, 0.0 );	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param nRowIdx	 * @param fieldName	 * @param detaultValue	 * @return	 */	public double getDouble( int nRowIdx, String fieldName, double detaultValue )	{		Object obj = get( nRowIdx, fieldName);		if( obj == null )			return detaultValue;		else if( obj instanceof Number )			return ((Number)obj).doubleValue();		else if( obj instanceof String )			return Double.parseDouble(obj.toString());		else			return detaultValue;	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 escape형태로 return	 * (&, >, <, ', \, \\x28, \\x29, \r\n, \n, ' ', \t)문자만 변경	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getStringForHtml( int nRowIdx, String fieldName )	{		return HoUtil.escapeForHtml(getString(nRowIdx, fieldName));			}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 escape형태로 return	 * (&, >, <, ', \)문자만 변경	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getStringForInput( int nRowIdx, String fieldName )	{		return HoUtil.escapeForInput(getString(nRowIdx, fieldName));			}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 ###,###,###,###,###,###,###형태로 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getCurrencyFormat( int nRowIdx, String fieldName )	{		try {			return HoUtil.toCurrencyFormat(getString(nRowIdx, fieldName), (String)this.getDisplayFormat().get("CURRENCY"));		} catch( Exception e ) 	{			return "0";		}	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 format형태로 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getCurrencyFormat( int nRowIdx, String fieldName, String format) {		return HoUtil.getCurrencyFormat(get(nRowIdx, fieldName), format );	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 ###,###,###,###,###,###,###.000형태로 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getPointFormat(int nRowIdx,  String fieldName )	{		try {			return HoUtil.toPointFormat(getString(nRowIdx, fieldName), (String)this.getDisplayFormat().get("POINT"));		} catch( Exception e ) 	{			return "0.000";		}	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 ###,###,###,###,###,###,###.000형태로 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getPointFormat(int nRowIdx,  String fieldName, String format )	{		try {			return HoUtil.toPointFormat(getString(nRowIdx,fieldName), format);		} catch( Exception e ) 	{			return HoUtil.toPointFormat(new java.math.BigDecimal("0"), format);		}	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 "#,##0.00"형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getNumberFormat( int nRowIdx, String fieldName )	{		return getNumberFormat(nRowIdx, fieldName, (String)this.getDisplayFormat().get("NUMBER"));	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getNumberFormat( int nRowIdx, String fieldName, String format )	{		return getNumberFormat(nRowIdx, fieldName, "0", format);	}		/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param nRowIdx	 * @param fieldName	 * @param format	 * @return	 */	public String getNumberFormat( int nRowIdx, String fieldName, String defaultValue, String format )	{		DecimalFormat commaFormat = new DecimalFormat();		int pos = format.indexOf(".");				Number value = (Number)get(nRowIdx,  fieldName);		try {			if( value == null ) {				if (pos!=-1) { 					return commaFormat.format(0.0);				} else {					return commaFormat.format(0L);				}			} else {				if (pos!=-1) { 					return commaFormat.format(value.doubleValue());				} else {					return commaFormat.format(value.longValue());				}			}		}		catch( Exception e) {			return defaultValue;		}	}				/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 YYYY-MM-DD형태로 return	 * @param nRowIdx	 * @param fieldName	 * @return	 */	public String getYMDFormat( int nRowIdx, String fieldName )	{		if( get(nRowIdx, fieldName) instanceof Date ) {			return HoUtil.toYmdFormat((Date)get(nRowIdx, fieldName), (String)this.getDisplayFormat().get("YMD"))	;				} else {			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd")  ;						try {				return HoUtil.toYmdFormat( sdf.parse(getString(nRowIdx, fieldName)), (String)this.getDisplayFormat().get("YMD"));			} catch (ParseException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			return getString(nRowIdx, fieldName);		}	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param fieldName	 * @return	 */	public String getYMDHMFormat( int nRowIdx, String fieldName )	{		if( get(nRowIdx, fieldName) instanceof Date ) {			return HoUtil.toYmdFormat((Date)get(nRowIdx, fieldName), (String)this.getDisplayFormat().get("YMD") + (String)this.getDisplayFormat().get("HM"))	;				} else {			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddhhmmss")  ;						try {				return HoUtil.toYmdFormat( sdf.parse(getString(nRowIdx, fieldName)), (String)this.getDisplayFormat().get("YMD") + (String)this.getDisplayFormat().get("HM"));			} catch (ParseException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			return getString(nRowIdx, fieldName);		}	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param fieldName	 * @return	 */	public String getDateFormat(int nRowIdx, String fieldName ) {		return getYMDHMSFormat(nRowIdx, fieldName);	}	/**	 * 쿼리 결과중 fieldName컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param fieldName	 * @return	 */	public String getYMDHMSFormat( int nRowIdx, String fieldName )	{		if( get(nRowIdx, fieldName) instanceof Date ) {			return HoUtil.toYmdFormat((Date)get(nRowIdx, fieldName), (String)this.getDisplayFormat().get("YMD") + (String)this.getDisplayFormat().get("HMS"))	;				} else {			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddhhmmss")  ;						try {				return HoUtil.toYmdFormat( sdf.parse(getString(nRowIdx, fieldName)), (String)this.getDisplayFormat().get("YMD") + (String)this.getDisplayFormat().get("HMS"));			} catch (ParseException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			return getString(nRowIdx, fieldName);		}	}	/**	 * 쿼리 결과 Map을 String으로 return한다.	 */	public String toString() {		if( this.list == null) {			return null;		} else {			return this.list.toString();		}	}	/**	 * 쿼리 결과 Map을 String으로 return한다.	 */	public String toString(int nRowIdx) {		if( this.list == null) {			return null;		} else {			return this.toHoMap(nRowIdx).toString();		}	}		/**	 * <pre>	 * WizMapList의 각각의 row에 해당하는 정보를 element로 만들어 준다.	 * </pre>	 * @param list	 * @param rowCnt	 * @return	 * @exception	 * @see	 */	public String toXMLList(String id) {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.		sbRow.append("<dataset id=\""+id+"\">\n");				for( int nRowIdx=0 ; nRowIdx<list.size() ; nRowIdx++ ) {			sbRow.append("	<record>\n");			sbRow.append("		<rownum>");			sbRow.append("<![CDATA[" +(nRowIdx+1)+ "]]>");			sbRow.append("</rownum>\n");			for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {					sbRow.append("		<" + getMetaData().getColumnName(i).toUpperCase() + ">");				sbRow.append("<![CDATA[" +this.getString(nRowIdx, getMetaData().getColumnName(i))+ "]]>");				sbRow.append("</" + getMetaData().getColumnName(i).toUpperCase() + ">\n");			}			sbRow.append("	</record>\n");		}		sbRow.append("</dataset>");		return sbRow.toString();	}			/**	 * <pre>	 * WizMapList의 각각의 row에 해당하는 정보를 element로 만들어 준다.	 * </pre>	 * @param list	 * @param rowCnt	 * @return	 * @exception	 * @see	 */	public String toXML(int nRowIdx) {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.				sbRow.append("	<record>\n");		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			sbRow.append("		<" + getMetaData().getColumnName(i).toUpperCase() + ">");			sbRow.append("<![CDATA[" + this.getString(nRowIdx, getMetaData().getColumnName(i)) + "]]>");			sbRow.append("</" + getMetaData().getColumnName(i).toUpperCase() + ">\n");		}		sbRow.append("	</record>\n");		return sbRow.toString();	}		/**	 * <pre>	 *  javascript형태	 * </pre>	 */	public String toJavascriptDataArray() {				return toJavascriptDataArray(0);	}	/**	 * <pre>	 *  javascript형태	 * </pre>	 */	public String toJavascriptDataArray(int fromIdx) {		StringBuffer sbRow = new StringBuffer(1024);		sbRow.append('[');		for( int nRowIdx=fromIdx ; nRowIdx<list.size() ; nRowIdx++ ) {			if( nRowIdx!=fromIdx) {				sbRow.append(',');			}			sbRow.append('[');			for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {				if( i!=0 ) {					sbRow.append(',');				}				sbRow.append('\'' +HoUtil.toJsonString(getString(nRowIdx, getMetaData().getColumnName(i)))+ '\'');			}			sbRow.append(']').append('\r').append('\n');		}		sbRow.append(']').append('\r').append('\n');		return sbRow.toString();	}		/**	 * 'columnValue1', 'columnValue2', 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptArgString(int nRowIdx) {		StringBuffer sb = new StringBuffer();		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(nRowIdx, getMetaData().getColumnName(i))));			sb.append('\'');		}		return sb.toString();	}	/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(int nRowIdx) {		String [] arrSet = new String[getMetaData().getColumnCount()];		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			arrSet[i] = getMetaData().getColumnName(i);		}				return toJsonCamel(nRowIdx, arrSet);	}		/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(int nRowIdx, Set set) {		String [] arrSet = new String[set.size()];		Iterator it = set.iterator();				for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}				return toJsonCamel(nRowIdx, arrSet);	}		/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(int nRowIdx, String [] set) {		StringBuffer sb = new StringBuffer();				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(HoUtil.toCamel(set[i]));			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(nRowIdx, set[i].toUpperCase())));			sb.append('\'');		}		return sb.toString();	}		/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(int nRowIdx) {		String [] arrSet = new String[getMetaData().getColumnCount()];		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			arrSet[i] = getMetaData().getColumnName(i);		}				return toJson(nRowIdx, arrSet);	}		/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(int nRowIdx, Set set) {		String [] arrSet = new String[set.size()];		Iterator it = set.iterator();				for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}				return toJson(nRowIdx, arrSet);	}	/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(int nRowIdx, String [] set) {		StringBuffer sb = new StringBuffer();				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(set[i]);			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(nRowIdx, set[i].toUpperCase())));			sb.append('\'');		}				return sb.toString();	}		/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(int nRowIdx, String [][] set) {		StringBuffer sb = new StringBuffer();				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(set[i][0]);			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(nRowIdx, set[i][1].toUpperCase())));			sb.append('\'');		}		return sb.toString();	}		/**	 * { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(int nRowIdx) {		String [] arrSet = new String[getMetaData().getColumnCount()];				for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			arrSet[i] = getMetaData().getColumnName(i);		}				return toJavaScriptObject(nRowIdx, arrSet);	}	/**	 * Set에 해당하는 column을 가지고 { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(int nRowIdx, Set set) {		String [] arrSet = new String[set.size()];		Iterator it = set.iterator();		for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}		return toJavaScriptObject(nRowIdx, arrSet);	}	/**	 * Set에 해당하는 column을 가지고 { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(int nRowIdx, String [] set) {		StringBuffer sb = new StringBuffer();		sb.append('{');				for( int i=0 ; i<set.length; i++ ) {						if( i!=0 ) {				sb.append(',');			}			sb.append(set[i].toUpperCase());			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(nRowIdx, set[i].toUpperCase())));			sb.append('\'');		}		sb.append('}');						return sb.toString();	}}