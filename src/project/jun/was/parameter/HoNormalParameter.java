package project.jun.was.parameter;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.apache.commons.fileupload.FileItem;import project.jun.util.HoUtil;import project.jun.util.HoValidator;import project.jun.was.config.HoConfig;public class HoNormalParameter extends HoParameter {	/**		 * 생성자..	 * @param hoRrequest	 * @param hConfig	 */	public HoNormalParameter( HoRequest hoRrequest, HoConfig hConfig)	{		super(hoRrequest, hConfig);				// encode된 char-set설정.		this.characterSet = hConfig.getCharacterSet();				parseRequest();	}		/**	 * 파라미터명을 소문자로 map에 저장한다.	 */	public void parseRequest() {		Enumeration paramEnum =  getRequest().getParameterNames();		String paramName = null;				while( paramEnum.hasMoreElements() ) {			paramName = (String) paramEnum.nextElement();						this.names.put(paramName.toUpperCase(), paramName);		}	}		/**	 * request.getParameter()를 대체	 */	public String get(String name) throws UnsupportedEncodingException {		String paramName = getName(name);		String defaultValue = "";		if( HoUtil.replaceNull(name).equals("") ) {						return defaultValue;		}		String value = "";		try {			value = getRequest().getParameter(paramName);		} catch(Exception e) {					}		// map에 저장된 default값이 있으면 저장된 값을 가져온다.		if( HoValidator.isEmpty(value) && !HoValidator.isEmpty(paramName) && defaultValueMap.containsKey(paramName.toUpperCase()) ) {			defaultValue = (String) defaultValueMap.get(paramName.toUpperCase());		}		return decodeValue( value, defaultValue );	}	/**	 * request.getParameter()를 대체	 */	public String get(String name, String defaultValue) throws UnsupportedEncodingException {		String paramName = getName(name);		if( defaultValue == null ) {			defaultValue = "";		}				if( HoUtil.replaceNull(name).equals("") ) {						return defaultValue;		}		String value = "";		try {			value = getRequest().getParameter(paramName);		} catch(Exception e) {					}				// request.getParameter()값이 없을 경우 default값을 map에 저장한다.		if( HoValidator.isEmpty(value) && !HoValidator.isEmpty(defaultValue) ) {			defaultValueMap.put(name.toUpperCase(), defaultValue);		}					return decodeValue( value, defaultValue );	}				public FileItem getFile(String name) {		return null;	}	public FileItem[] getFiles(String name) {		return null;	}		/**	 * 파라미터의 명을 조회(String[])한다.	 */	public String[] getNames() {		List list = this.getNamesList();		String[] strArray = new String[list.size()]; 		return (String[]) list.toArray( strArray );	}	/**	 * 파라미터의 명을 조회(List)한다.	 */	public List getNamesList() {		Set set =  new TreeSet(names.keySet());		Iterator it = set.iterator();		List list = new ArrayList();				while( it.hasNext() ) {			list.add( (String)it.next() );		}				return list;	}		public String[] getValues(String name) throws UnsupportedEncodingException {		return getValues(name, "");	}	public String[] getValues(String name, String defaultValue) throws UnsupportedEncodingException {		String paramName = getName(name);		if( defaultValue == null ) {			defaultValue = "";		}				if( HoUtil.replaceNull(name).equals("") ) {			return new String[0];		}		String[] arr = getRequest().getParameterValues( paramName );		if( arr == null )			return new String[0];						ArrayList list = new ArrayList();		for( int i=0; i < arr.length; i++ ) {			list.add(decodeValue( arr[i], defaultValue ));		}						String [] values = new String[arr.length];				System.arraycopy(list.toArray(), 0, values, 0, list.size());				return values;	}		public String getQueryString() throws UnsupportedEncodingException {		// TODO Auto-generated method stub		return null;	}	/**	 * 파라미터를 parameterNamed의 대문자를 key로한 Map형태로 변환환다.	 */	public Map getParameterMap() {		return getParameterMap(true);	}	public Map getParameterMap(boolean withSession) {		List list =  getNamesList();			Map values = new HashMap();			if( withSession ) {			// 세션정보를 담는다.			values.putAll(this.hoRrequest.getSessionMap());		}				String paramName = null;			for( int i=0 ; i<list.size(); i++) {			paramName = (String) list.get(i);				try {				values.put(paramName.toUpperCase(), getValues(paramName));			} catch (UnsupportedEncodingException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}					}				return values;	}}