package project.jun.was.parameter;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import javax.servlet.jsp.PageContext;import project.jun.dao.result.HoMap;import project.jun.util.HoSpringUtil;import project.jun.was.config.HoConfig;public class HoRequest {	private ServletRequest request;	private ServletResponse response;	private HoConfig config = null;	public HoRequest( PageContext context )	{		this.request = context.getRequest();		this.response = context.getResponse();				HoSpringUtil hsu = new HoSpringUtil();		config = (HoConfig) hsu.getBean(context.getServletContext(), "config");	}		public HoRequest( HttpServletRequest request, HttpServletResponse response )	{		this.request = request;		this.response = response;				HoSpringUtil hsu = new HoSpringUtil();		config = (HoConfig) hsu.getBean(request.getSession().getServletContext(), "config");	}	/**	 * HttpSession을 return한다.	 * @return	 */	public HttpSession getSession() {		return getRequest().getSession();	}	/**	 * HttpSession을 return한다.	 * @return	 */	public HttpSession getSession(boolean create) {		return getRequest().getSession(create);	}	/**	 * Map을 key별로 나누어서 세션정보를 담는다.	 * 예를 들어, 	 * 		map.put("NAME", "이름");	 * 		map.put("AGE", "20");인 Map은 	 * 아래와 같이 session에 저장된다.	 * 		getSession().setAttribute(config.getSessionNamePrefix()+"NAME","이름"));	 * 		getSession().setAttribute(config.getSessionNamePrefix()+"AGE","20"));	 * 			 * @param map	 */	public void setSessionHoMap(Set set, HoMap map) {		Iterator it = set.iterator();				String key = null;		while(it.hasNext()) {			key = (String) it.next();			setSessionObject( key.toUpperCase() ,map.get(key));		}	}		/**	 * Map을 key별로 나누어서 세션정보를 담는다.	 * 예를 들어, 	 * 		map.put("NAME", "이름");	 * 		map.put("AGE", "20");인 Map은 	 * 아래와 같이 session에 저장된다.	 * 		getSession().setAttribute(config.getSessionNamePrefix() + "NAME","이름"));	 * 		getSession().setAttribute(config.getSessionNamePrefix() + "AGE","20"));	 * 			 * @param map	 */	public void setSessionMap(Map map) {		Iterator it = map.keySet().iterator();				String key = null;		while(it.hasNext()) {			key = (String) it.next();			setSessionObject( key.toUpperCase() ,map.get(key));		}	}		/**	 * 세션정보를 담는다.	 * @param sessionName	 * @param entry	 */	public void setSessionObject(String sessionName,  Object entry) {		setSessionObject(sessionName, entry, true);	}	/**	 * 세션정보를 담는다.	 * @param sessionName	 * @param entry	 * @param usePrefix HoConfig.getSessionNamePrefix()의 사용여부 	 */	public void setSessionObject(String sessionName,  Object entry, boolean usePrefix) {		if(usePrefix) {			if( sessionName.toUpperCase().startsWith(config.getSessionNamePrefix())) {				getSession().setAttribute(sessionName.toUpperCase(), entry);			} else {				getSession().setAttribute(config.getSessionNamePrefix() + sessionName.toUpperCase(), entry);			}		} else {			getSession().setAttribute(sessionName.toUpperCase(), entry);		}	}		/**	 * Session정보를 "SSN_"+key.toUpperCase()의 Map값으로 얻는다.	 * @return	 */	public Map getSessionMap() {		Map map = new HashMap();				Enumeration sEnum = getSession().getAttributeNames();				String key = null;		while( sEnum.hasMoreElements() ) {			key = sEnum.nextElement().toString();						if( key.startsWith(config.getSessionNamePrefix())) {				map.put(key.toUpperCase(), getSessionString(key)); 			}					}		return map;	}	/**	 * 세션정보를 String으로 가져온다..	 * @param sessionName	 * @param entry	 */	public String getSessionString(String sessionName) {		return getSessionObject(sessionName.toUpperCase(), true)==null ? "" : getSessionObject(sessionName.toUpperCase(), true).toString();	}	/**	 * 세션정보를 String으로 가져온다..	 * @param sessionName	 * @param entry	 */	public String getSessionString(String sessionName, boolean usePrefix) {		Object value =  getSessionObject(sessionName.toUpperCase(), usePrefix);		return value == null ? "" : value.toString(); 	}			/**	 * 세션정보를 Ojbect로 가져온다..	 * @param sessionName	 * @param entry	 */	public Object getSessionObject(String sessionName, boolean usePrefix) {		if( usePrefix ) {			if( sessionName.toUpperCase().startsWith(config.getSessionNamePrefix())) {				return getSession().getAttribute(sessionName.toUpperCase());			} else {				return getSession().getAttribute(config.getSessionNamePrefix() + sessionName.toUpperCase());			}		} else {			return getSession().getAttribute(sessionName.toUpperCase());		}	}		/**	 * 세션정보를 삭제한다.	 * @param sessionName	 */	public void removeSession(String sessionName) {		if( sessionName.toUpperCase().startsWith(config.getSessionNamePrefix())) {			getSession().removeAttribute(sessionName.toUpperCase());		} else {			getSession().removeAttribute(config.getSessionNamePrefix() + sessionName.toUpperCase());		}	}		public HttpServletRequest getRequest() {		return (HttpServletRequest) this.request;	}	public HttpServletResponse getResponse() {		return (HttpServletResponse) this.response;	}		}