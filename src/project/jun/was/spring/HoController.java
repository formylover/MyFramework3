package project.jun.was.spring;import java.io.IOException;import java.io.UnsupportedEncodingException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.fileupload.FileUploadException;import org.apache.log4j.Logger;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.View;import org.springframework.web.servlet.mvc.Controller;import project.jun.delegate.HoDelegate;import project.jun.util.HoUtil;import project.jun.util.HoValidator;import project.jun.was.config.HoConfig;import project.jun.was.parameter.HoCosFileParameter;import project.jun.was.parameter.HoFileParameter;import project.jun.was.parameter.HoNormalParameter;import project.jun.was.parameter.HoParameter;import project.jun.was.parameter.HoRequest;import project.jun.was.result.exception.HoException;import project.jun.was.result.message.HoMessage;public abstract class HoController implements Controller {	protected  Logger          logger     = null; 	public static final String HO_PARAMETER  = "HOCONTROLLER.PARAMETER";	public static final String HO_FAILURE    = "HOCONTROLLER.FAILURE";	public static final String HO_INCLUDE_JSP    = "HOCONTROLLER.INCLUDE_JSP";	public static final String HO_CUD_RESULT     = "HOCONTROLLER.CUD_RESULT";		// 환경변수 정의.	protected HoConfig hoConfig = null;	protected HoDelegate hoDelegate = null;	private View documentView;	private String forwardPage;	private String includePage;	private String exceptionPage;	private String messagePage;	private String defaultPageInfo;		/**	 * 파라미터를 parse한다.	 * @param request	 * @return	 * @throws FileUploadException	 * @throws IOException	 */	protected HoParameter processParameter( HoRequest   hoRequest )  throws FileUploadException, IOException	{				HttpServletRequest request = hoRequest.getRequest();		String contentType = request.getContentType();		        if( !"POST".equalsIgnoreCase(request.getMethod()) ) {        	return new HoNormalParameter( hoRequest, getHoConfig() );        } else {        	if( HoUtil.replaceNull(contentType).startsWith("multipart/form-data")) {        		if( !HoUtil.replaceNull(HoUtil.replaceNull(getHoConfig().getUploadType())).equals("cos")) {	            	return new HoFileParameter( hoRequest, getHoConfig() );        		} else {        			return new HoCosFileParameter( hoRequest, getHoConfig() );        		}        	} else	        	return new HoNormalParameter( hoRequest, getHoConfig() );        }	}		public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {		    	HoRequest   hoRequest = new HoRequest( request, response );    	initExecute( hoRequest );    	// B/L에서 CUD일경우 RETURN 한 Message객체..    	Object cudResult = null;    		    	HoParameter param = processParameter( hoRequest );  				ModelAndView mav = new ModelAndView();				HoModel model = new HoModel(mav.getModelMap());		mav.addObject(HO_PARAMETER, param);		        if( this.getHoDelegate() != null ) {        	this.getHoDelegate().setHoParameter(param);        	this.getHoDelegate().setHoModel(model);        }		        String actionFlag = param.get( getHoConfig().getActionFlag(), "p_action_flag" );                getLogger().info(" actionFlag : " + actionFlag );        		try {			// 실제 B/L 이전 실행..			beforeExecute( actionFlag, mav  );			// 실제 B/L			cudResult = execute( actionFlag, mav  );			// 실제 B/L 이후 실행			afterExecute( actionFlag, mav  );		} catch( Exception e ) {						getLogger().error(e);						if( !this.getHoConfig().isProductMode() ) {				e.printStackTrace();			}			try {				exceptionExecute(actionFlag, mav); 			} catch(Exception ee) {            	if( !this.getHoConfig().isProductMode() && !((e instanceof java.net.SocketException) && e.getMessage().equals("Broken pipe"))) {            		ee.printStackTrace();            	}        	}						// Exception 발생시 forward			getExceptionForward( actionFlag, mav, e);		} finally {			try {				finallyExecute( actionFlag, mav  );        	} catch(Exception e) {            	if( !this.getHoConfig().isProductMode()) {            		e.printStackTrace();            	}        	}		        }				// 다운로드 일 경우.		if(actionFlag.toLowerCase().indexOf("download")!=-1 && documentView!=null) {			mav.setView(documentView);        	return mav;        } else {        	// 정상적인 실행 완료시 forward        	return getForward(actionFlag, mav, cudResult);        }	}	/**	 * Exception이 발생했을 경우 forward될 페이지를 구한다.	 * @param actionFlag	 * @param mav	 * @param e	 * @return	 * @throws UnsupportedEncodingException 	 */    public ModelAndView getExceptionForward(String actionFlag, ModelAndView mav, Exception e) {		mav.addObject(HO_FAILURE, new Boolean(true));		HoException he = null;		    	if( e instanceof HoException ) {    		he = (HoException) e;    	} else if( e instanceof java.sql.SQLException ) {    		he = new HoException("ERR-CO-0004", e);    	} else {    		he = new HoException(e);    	}		// 결과를 등록		mav.addObject(HO_CUD_RESULT, he); 		HoParameter param = (HoParameter) mav.getModelMap().get(HO_PARAMETER);		String messagePage = "";		boolean useMessageParam = false;		try {			if( !param.get("message").equals("") && this.getHoConfig().getOutlineMap().containsKey(param.get("message").toUpperCase())) {				messagePage = param.get("message").toUpperCase();			}		} catch (UnsupportedEncodingException e1) {			if(!this.getHoConfig().isProductMode()) {				e.printStackTrace();			}		}				if( HoUtil.replaceNull(this.getExceptionPage()).equals("") && !messagePage.equals("")) {			useMessageParam = true;			this.setExceptionPage((String) this.getHoConfig().getOutlineMap().get(messagePage) );		} 		mav.setViewName(this.getExceptionPage());				getLogger().info("message-page   : ["+ this.getExceptionPage() +"] "+ (useMessageParam ? "(Use parameter(message) : "+messagePage+")" : "" ) +" - " + mav.getViewName());		    	return mav;    }        /**     * 성공적으로 B/L이 실행될 경우 forward될 페이지를 구한다.     * @param actionFlag     * @param mav     * @param cudResult     * @return     */	public ModelAndView getForward(String actionFlag,ModelAndView mav, Object result) {		HoRequest hoRequest = ((HoParameter) mav.getModel().get(HO_PARAMETER)).getHoRequest();		getLogger().info("uri            : " + requestUri(hoRequest));   				// Message를 나타낼 수 있는 형태의 결과값인지 확인(String, String[], HoMessage)    	if( isActionForMessage(actionFlag,  mav, result) ) {    		return getMessageForward(actionFlag, mav, result);    	} else {    					HoParameter param = (HoParameter) mav.getModelMap().get(HO_PARAMETER);			boolean outlineUseParam = false;			// forward페이지 정보가 없을경우.			if( HoUtil.replaceNull(this.getForwardPage()).equals("")) {    			try {    				String outlinePage = "";    				if( !HoValidator.isEmpty(param.get("outline")) && this.getHoConfig().getOutlineMap().containsKey(param.get("outline").toUpperCase())) {    					outlinePage = param.get("outline").toUpperCase();    				}    				// 파라미터에 outline이 있으면.. outline파라미터를 이용해서 설정..					if( !outlinePage.equals("")) {						outlineUseParam = true;						this.setForwardPage((String) this.getHoConfig().getOutlineMap().get(outlinePage) );					} 				} catch (UnsupportedEncodingException e) {					if(!this.getHoConfig().isProductMode()) {						e.printStackTrace();					}				}    		} 			if( HoValidator.isEmpty(this.getForwardPage())) {    			// forward될 페이지없음.    			return getExceptionForward(actionFlag, mav, new HoException("ERR-CO-0009"));			}			mav.setViewName(this.getForwardPage());    					try {		    	getLogger().info("forward-page   : ["+ this.getForwardPage() +"] "+ (outlineUseParam ? "(Use parameter(outline) : "+param.get("outline")+")" : "" ) +" - " + mav.getViewName());			} catch(Exception e) {							}	    	    		if( HoValidator.isNotEmpty(this.getIncludePage())) {				ModelAndView includeView = new ModelAndView(this.getIncludePage());     			mav.addObject(HO_INCLUDE_JSP, includeView.getViewName());		    	getLogger().info("included-page   : ["+ this.getIncludePage() +"] - " + includeView.getViewName());		    	// wreq.setIncludeJsp(includeView.getViewName());    		} else {				// 파라미터에 include가 있고,  DefaultPageInfo가 있으면.. include파라미터를 이용해서 설정..				if( HoUtil.replaceNull(this.getDefaultPageInfo()).indexOf("#p_action_flag#")!=-1) {					ModelAndView includeView = new ModelAndView(this.getDefaultPageInfo().replaceAll("#p_action_flag#", actionFlag));					 	    			mav.addObject(HO_INCLUDE_JSP, includeView.getViewName());	    						    	getLogger().info("included-page   : ["+ this.getIncludePage() +"] (Use parameter("+ getHoConfig().getActionFlag()+") :"+actionFlag+" ) - " + includeView.getViewName());	    							} else {					getLogger().warn("included-page   : undefined!!! ");				}    		}	    	return mav;    	}	    		}		/**	 * Message를 나타낼 수 있는 형태의 결과값인지 확인	 * @param actionFlag	 * @param mav	 * @param result	 * @return	 */	private boolean isActionForMessage(String actionFlag, ModelAndView mav, Object result) {		boolean isForMessage = false;		if( result instanceof HoMessage ) {			isForMessage = true;		} else if( result instanceof String ) {			isForMessage = true;		} else if( result instanceof String [] ) {			isForMessage = true;		} 		return isForMessage;			}		/**	 * CUD가 성공했을 경우 forward될 페이지를 구한다.	 * @param actionFlag	 * @param mav	 * @param result	 * @return	 */	private ModelAndView getMessageForward(String actionFlag, ModelAndView mav, Object result) {		mav.addObject(HO_FAILURE, new Boolean(false));				mav.setViewName(this.getMessagePage());				HoMessage hm = null;		if( result instanceof HoMessage ) {			hm = (HoMessage)result;		} else if( result instanceof String ) {			hm = new HoMessage((String) result);		} else if( result instanceof String [] ) {			hm = new HoMessage(((String[]) result)[0], ((String[]) result).length > 0 ? ((String[]) result)[1] : "" );		} 			HoParameter param = (HoParameter) mav.getModelMap().get(HO_PARAMETER);		String messagePage = "";		boolean useMessageParam = false;		try {			if( !param.get("message").equals("") && this.getHoConfig().getOutlineMap().containsKey(param.get("message").toUpperCase())) {				messagePage = param.get("message").toUpperCase();			}		} catch (UnsupportedEncodingException e) {			if(!this.getHoConfig().isProductMode()) {				e.printStackTrace();			}		}				if( HoUtil.replaceNull(this.getMessagePage()).equals("") && !messagePage.equals("")) {			useMessageParam = true;			this.setMessagePage((String) this.getHoConfig().getOutlineMap().get(messagePage) );		} 		// 결과를 등록		mav.addObject(HO_CUD_RESULT, hm);		    	getLogger().info("message-page   : ["+ this.getMessagePage() +"] "+ (useMessageParam ? "(Use parameter(message) : "+messagePage+")" : "" ) +" - " + mav.getViewName());						return mav;	}		/**	 * request uri구한다.	 * @param hoRequest	 * @return	 */	public String requestUri(HoRequest hoRequest) {		org.springframework.web.util.UrlPathHelper urlPathHelper = new org.springframework.web.util.UrlPathHelper(); 		return urlPathHelper.getOriginatingRequestUri(hoRequest.getRequest()); 			}		/**	 * 기본적으로 사용될 jsp경로정보를 get	 * @return	 */	public String getDefaultPageInfo() {		return HoUtil.replaceNull(defaultPageInfo);	}	/**	 * 기본적으로 사용될 jsp경로정보를 set.	 * @return	 */	public void setDefaultPageInfo(String defaultPageInfo) {		this.defaultPageInfo = defaultPageInfo;	}	/**	 * CUD성공시 FORWARD될 페이지정보를 set	 * @param page	 */	public void setMessagePage(String page) {		this.messagePage = page;	}		/**	 * CUD성공시 FORWARD될 페이지정보를 get	 * @param page	 */	public String getMessagePage() {		return this.messagePage;	}	/**	 * CUD실패시 FORWARD될 페이지정보를 set	 * @param page	 */	public void setExceptionPage(String page) {		this.exceptionPage = page;	}	/**	 * CUD실패시 FORWARD될 페이지정보를 get	 * @param page	 */	public String getExceptionPage() {		return this.exceptionPage;	}	/**	 * include될 페이지정보를 set	 * <b>include만으로는 페이지를 호출 할 수 없기때문에 반드시 forwardPage가 설정되어야함.</b>	 * @param page	 */	public void setIncludePage(String page) {		this.includePage = page;	}	/**	 * include될 페이지정보를 get	 * <b>include만으로는 페이지를 호출 할 수 없기때문에 반드시 forwardPage가 설정되어야함.</b>	 * @param page	 */	public String getIncludePage() {		return this.includePage;	}	/**	 * forward될 페이지정보를 set	 * @param page	 */	public void setForwardPage(String page) {		this.forwardPage = page;	}		/**	 * forward될 페이지정보를 get	 * @param page	 */	public String getForwardPage() {		return this.forwardPage;	}	/**	 * 실제 biz logic실행전 초기에 실행될 method	 * @param request	 * @param response	 * @throws Exception	 */    public void initExecute( HoRequest   hoRequest ) throws Exception { }     /**     * 실제 biz logic실행전 실행될 method     * @param actionFlag     * @throws Exception     */    public void beforeExecute( String actionFlag, ModelAndView mav) throws Exception { }        /**     * 실제 biz logic 실행될 method     * @param actionFlag     * @throws Exception     */        public abstract Object execute( String actionFlag, ModelAndView mav) throws Exception;        /**     * 실제 biz logic실행후 실행될 method     * @param actionFlag     * @throws Exception     */     public void afterExecute( String actionFlag, ModelAndView mav) throws Exception { }        /**     * exception발생시 실행될 method     * @param actionFlag     * @throws Exception     */    public void exceptionExecute( String actionFlag, ModelAndView mav) throws Exception { }    /**     * 항상 실행될 method     * @param actionFlag     * @throws Exception     */    public void finallyExecute( String actionFlag, ModelAndView mav) throws Exception { }    	public Logger getLogger() {		return this.logger == null ? Logger.getRootLogger() : this.logger;	}		public void setLogger(String name) {		this.logger = Logger.getLogger(name);	}		public HoConfig getHoConfig() {		return hoConfig;	}	public void setHoConfig(HoConfig hoConfig) {		this.hoConfig = hoConfig;	}	public void setHoDelegate(HoDelegate hoDelegate) {		this.hoDelegate = hoDelegate;	}	protected HoDelegate getHoDelegate() {		return hoDelegate;	}}