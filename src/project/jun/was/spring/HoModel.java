package project.jun.was.spring;import java.io.Serializable;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import javax.servlet.ServletRequest;import javax.servlet.http.HttpServletRequest;import org.springframework.ui.ModelMap;import project.jun.dao.result.HoMap;import project.jun.dao.result.HoList;import project.jun.dao.result.HoResult;import project.jun.util.HoFomatter;import project.jun.util.HoUtil;import project.jun.was.parameter.HoRequest;public class HoModel implements Serializable{	/**	 * 	 */	private static final long serialVersionUID = -7225577863981142901L;	private ModelMap modelMap = null;	private ServletRequest request;	private Map displayFormat = null;		public HoModel(ModelMap modelMap) {		this.modelMap = modelMap;	}	public HoModel(ServletRequest request) {		this.request = request;	}	public HoModel(HttpServletRequest request) {		this.request = request;	}	public HoModel(HoRequest hoRequest) {		this.request = hoRequest.getRequest();	}		/**	 * 값을 key를 대문자로 변환하여 put한다.	 */	public void put( Object key, Object value )	{		if(value instanceof HoResult) {						((HoResult)value).setDisplayFormat(this.displayFormat);		}				if( key instanceof String ) {				String name = (String)key;				if( this.modelMap!=null ) {					this.modelMap.addAttribute( name.toUpperCase(), value );				} else if( this.request!= null ) {					this.request.setAttribute(name.toUpperCase(), value);				}		} else {			if( this.modelMap!=null ) {				this.modelMap.addAttribute( key.toString().toUpperCase(), value );			} else if( this.request!= null ) {				this.request.setAttribute( key.toString().toUpperCase(), value);			}		} 	}	/**	 * 새로운 map을 put한다.	 * @param attributes	 * @return	 */    public ModelMap put(Map attributes)    {        if(attributes != null) {        	Set keySet = attributes.keySet();        	Iterator it = keySet.iterator();        	Object key = null;        	while(it.hasNext()) {        		key = it.next();        		        		put(key, attributes.get(key));        	}        	        }        return this.modelMap;    }    	/**	 * 값을 key를 대문자로 변환하여 get한다	 */	public Object get( Object key )	{		if( this.modelMap!=null ) {			if( key instanceof String ) {				String name = (String)key;				return this.modelMap.get( name.toUpperCase() );						}			else {				return this.modelMap.get( key );			} 		} else if( this.request!= null ) {			if( key instanceof String ) {				String name = (String)key;				return this.request.getAttribute( name.toUpperCase() );						}			else {				return this.request.getAttribute( key.toString().toUpperCase() );			} 		} else {			return null;		}			}	/**	 * entry가 List형태이면 List로 아닐경우 null을 반환한다.	 * @param key	 * @return	 */	public List getList( Object key )	{		Object obj = get( key );		if( obj == null )			return null;		else if( obj instanceof List )			return (List)obj;		else			return null;	}	/**	 * entry가 HoMap형태이면 HoMap로 아닐경우 Exceptiond을 발생한다.	 * @param key	 * @return	 */	public HoMap getHoMap( Object key )	{		Object obj = get( key );		if( obj == null )			return null;		else if( obj instanceof HoMap )			return (HoMap)obj;		else			throw new ClassCastException();	}	/**	 * entry가 HoList형태이면 HoMap로 아닐경우 Exceptiond을 발생한다.	 * @param key	 * @return	 */	public HoList getHoList( Object key )	{		Object obj = get( key );		if( obj == null )			return null;		else if( obj instanceof HoList )			return (HoList)obj;		else			throw new ClassCastException();	}	/**	 * entry의 toString()값을 반환한다.	 * @param key	 * @return	 */	public String getString( Object key )	{		Object obj = get( key );		if( obj == null )			return "";		else			return obj.toString();	}		/**	 * entry의 toString()값을 htlm형태로  반환한다.	 * @param key	 * @return	 */	public String getStringForHtml( Object key )	{		return HoUtil.escapeForHtml(getString(key));			}	/**	 * entry의 toString()값을 htlm(input)형태로  반환한다.	 * @param key	 * @return	 */	public String getStringForInput( Object key )	{		return HoUtil.escapeForInput(getString(key));			}	/**	 * entry의 toString()값을 통화형태(###,###,###,###,###,###,###)로 반환한다.	 * @param key	 * @return	 */	public String getCurrencyFormat( Object key )	{		return HoFomatter.getCurrencyFormat(getString(key));	}		/**	 * int값은 Integer로 wrap하여 put한다.	 * @param key	 * @param value	 */	public void put( Object key, int value )	{		put( key, new Integer( value ));	}		/**	 * entry가 Number형태이면 int형태로 반환한다..	 * @param key	 * @return	 */	public int getInt( Object key )	{		Object obj = get( key );				if( obj == null )			return 0;		else if( obj instanceof Number )			return ((Number)obj).intValue();		else			return Integer.parseInt(obj.toString());	}		/**	 * long값은 Long로 wrap하여 put한다.	 * @param key	 * @param value	 */	public void put( Object key, long value )	{		this.put( key, new Long(value) );	}	/**	 * entry가 Number형태이면 long형태로 반환한다..	 * @param key	 * @return	 */	public long getLong( Object key )	{		Object obj = get(key);				if( obj == null )			return 0L;		else if( obj instanceof Number )			return ((Number)obj).longValue();		else			return Long.parseLong(obj.toString());	}		/**	 * double값은 Double로 wrap하여 put한다.	 * @param key	 * @param value	 */	public void put( Object key, double value )	{		this.put( key, new Double(value ));	}		/**	 * entry가 Number형태이면 double형태로 반환한다..	 * @param key	 * @return	 */	public double getDouble( Object key )	{		Object obj = get(key);				if( obj == null )			return 0.0;		else if( obj instanceof Number )			return ((Number)obj).doubleValue();		else			return Double.parseDouble(obj.toString());	}		/**	 * key값의 정보를 Iterator로 반환한다.	 * @return	 */    public Iterator keyIterator() {    	return (new TreeSet(this.modelMap.keySet())).iterator();    }        public boolean containsAttribute(String attributeName)    {        return this.modelMap.containsKey(attributeName);    }	public Map getDisplayFormat() {		return displayFormat;	}	public void setDisplayFormat(Map displayFormat) {		this.displayFormat = displayFormat;	}    }